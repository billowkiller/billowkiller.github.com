---
layout: post
title: "Nginx architecture(1)--Overview"
date: 2013-10-13 00:28
comments: true
categories: rework
tags: Nginx architecture
---

从04年发布以来，Nginx已经成为多个国内外互联网具体首选的高性能Web服务器。其特点是占有内存少，并发能力强，并且由于Nginx使用基于事件驱动的架构能够最有效的利用多核CPU的处理能力，进程可以无阻塞的运行。

特别是Nginx可以利用当前操作系统特有的一些高校API来提高自己的性能，例如Linux上的`epoll`、Solaris上的event ports和Free BSD上的kqueue。又如对于Linux，Nginx支持其独有的sendfile系统调用，可以高效的讲硬盘中的数据发送到网络上（无需将硬盘数据先复制到用户态内存中）。

所以通过分析Nginx的架构设计，可以怎样充分利用服务器上的硬件资源，以及学习到更为先进的理念。下面就来分析和学习Nginx的架构设计。

<img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/nginx_zps7d735b88.jpg" alt="Nginx logo"/>

<!--more-->

## 1. 基础架构

Nginx是模块化的，事件驱动，异步，单线程的，非无阻塞架构的。
 
<img src="http://www.aosabook.org/images/nginx/architecture.png" width="650px"  alt="Diagram of Nginx's architecture"/>

### 1.1 Nginx配置

**内核参数优化**

Nginx需要可以对linux内核参数进行修改，来实现对内核参数的优化，以达到硬件资源的最大化利用。

默认的linux内核参数考虑的是最通用的场景，而高并发访问的Web服务器需要根据具体的业务特点来调整内核参数。Nginx作为静态Web内容服务器、反向代理服务器或是提供内容压缩功能的服务器时，内核参数的调整都是不同的。

具体的文件修改是在`/etc/sysctl.conf`下。举例来说，滑动窗口的大小与套接字缓存区会在一定程度上影响并发连接的数目。每个TCP连接都会为维护TCP滑动窗口而消耗额昵称，这个窗口会更具服务器的处理速度收缩或扩张。

**Nginx配置文件**

而Nginx的配置文件则规定了程序运行时几个核心模块的基本配置。具体分为4类：

*	用于调试、定位问题的配置项
*	正常运行的必备配置项
*	优化性能的配置项
*	事件类配置项

其他配置项是针对具体模块的，例如对于一个为完整的静态Web服务器提供了8类配置信息（功能）：

*   虚拟主机与请求的分发
    *   对特定的Host域名的请求提供不同的服务，以此实现虚拟主机功能
*   文件路径的定义
*   内存及磁盘资源的分配
*   网络连接的设置
*   MIME类型的设置
*   对客户端请求的限制
*   文件操作的优化
    *   sendfile系统条用
    *   aio系统调用
*   对客户端请求的特殊处理
    *   DNS
    *   忽略不合法HTTP头部

**配置文件读取**

Nginx启动的时候读取配置文件过程：

1.  更具命令行得到配置文件路径
2.  调用所有核心模块的`create_conf`方法生成存放配置项的结构体
3.  针对所有核心模块解析`Nginx.conf`配置文件
4.  调用所有核心模块的`init_conf`方法

### 1.2. 事件驱动架构

事件驱动模型就是事件发生源来产生事件，由一个或者多个事件收集器来收集、分发事件，然后许多事件处理器会注册自己感兴趣的事件，同时会消费这些事件。

对于Nginx来说，事件模块将负责事件的收集、分发操作，而所有的模块都可能是事件消费者，首先需要向事件模块注册感兴趣的事件类型，当有事件产生时，事件模块会把事件分发到相应的模块中进行处理。

Nginx完全采用事件驱动架构处理事务，与其他Web服务器不同。传统的Web服务器采用的事件驱动往往局限在TCP连接建立、关闭事件上，连接建立后将这个会话加入队列排队让事件消费者进行消费。在连接建立与关闭之间会退化为按序执行的批处理模式，通常采用线程或进程执行的处理方式。这样的处理会在连接建立后始终占据系统资源，因为这段时间从1毫秒到1分钟都有可能，并且进程线程之间的切换也会有性能损失，这样影响了系统可以处理的并发连接数。

Nginx中只有事件模块才有资格占用进程资源，它们在分发某个事件时调用事件消费模块使用当前占用的进程资源。这种设计使得网络性能、用户感知的请求时延都得到提升，整个服务器的网络吞吐量都会由于事件的及时响应而增加。但是，每个事件消费者都不能有阻塞行为，否则会长时间占用事件分发进程而导致其他事件得不到及时响应。

<img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/_zpscc820489.jpg" width="600px" alt="Nginx事件驱动"/>

### 1.3 多模块设计

**Nginx的模块**

要知道Nginx有哪些模块，一个快速的方法就是编译Nginx。编译之后，会在源代码根目录下生成objs目录，该目录中包含有ngx_auto_config.h和ngx_auto_headers.h，以及ngx_modules.c文件，当然，还有Makefile文件等。
 
其中，生成的`ngx_modules.c`文件中，重新集中申明(使用extern关键字)了Nginx配置的所有模块，这些模块可通过编译前的configure命令进行配置，即设置哪些模块需要编译，哪些不被编译。

Nginx的模块化架构最基本的数据结构为`ngx_module_t`。整个数据结构规定了：

1.  该模块的上下文，每个种类的模块有不同的上下文，用void *ctx表示。
2.  一些callback函数
    *   `master`初始化和退出
    *   模块初始化
    *   工作进程初始化和退出
    *   线程初始化和退出
3. 模块的命令集，指向一个`ngx_command_t`结构数组
4. 模块的类型，运行定义模块类型这个概念，允许专注于不同领域的模块按照类型来区别。

具体的模块解释可以参考![http://www.linuxidc.com/Linux/2011-08/40949.htm]http://www.linuxidc.com/Linux/2011-08/40949.htm

<img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/nginx_zps3788eefc.jpg" alt="Nginx模块设计" width="650px">

**模块化设计的优点**

高度模块化的设计是Nginx的架构基础。在Nginx中，除了少量的核心代码，其他一切皆为模块。这种模块化设计同时具有以下几个特点：

1.  高度抽象的模块接口
    
    所有的模块都遵循同样的`ngx_module_t`(后面有说明)接口设计规范，这减少整个系统中的变数，这种方式带来良好的简单性、静态可扩展性、可重用性。

2.  模块接口非常简单，具有很高的灵活性

    模块的基本接口`ngx_module_t`足够坚定，只涉及模块的初始化、退出以及对配置项的处理，这同时也带来了足够的灵活性，是的Nginx比较简单地实现了动态可修改性(通过HUP信号在服务正常运行时使用新的配置文件生效，以及通过USR2信号实现平滑升级)。

3.  定义基础类型的模块：核心模块。

    这样可以简化Nginx的设计，使得非模块化框架代码只关注于如何调用核心模块(6个)。
    核心模块将ctx上下文进一步实例化为`ngx_core_module_t`结构体，它是以配置项的解析作为基础的，提供了create_conf回调方法来创建存储配置项的数据结构，在读取Nginx.conf文件时，会更具模块中的ngx_command_t解析出的配置项存放在这个数据结构中；还提供init_conf回调方法，用于在解析配置文件后，使用解析出的配置项初始化核心模块功能。
    
4. 多层次、多类别的模块设计

    所有的模块间是分层次和类别的，官方Nginx共有五大类型的模块：核心模块、配置模块、事件模块、HTTP模块、mail模块。核心模块和配置模块是由Nginx的框架代码所定义的。其他三种模块都不会与框架产生直接关系，实际上核心模块各有这三种模块的一个agent，并在同类模块中有一个作为和核心业务与管理功能的模块。


## 2. 请求的多阶段异步处理

请求的多阶段异步处理是把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以有事件收集、分发来触发。也就是说请求的多阶段异步处理只能基于事件驱动架构实现。

异步处理和多阶段是相辅相成的。只有多阶段了才能进行异步处理，异步处理使得阶段的划分才有意义。那么是什么原则来划分请求阶段呢？一般是找到请求处理流程中的阻塞方法（或造成阻塞的代码段）在阻塞代码段上按照下面4中方式来划分阶段：

1. 将阻塞进程的方法按照相关的触发事件分解为两个阶段
    *   阻塞方法改为非阻塞，调用这个方法
    *   处理非阻塞方法结果返回事件
2.  将阻塞方法调用按照事件分解为多个阶段的方法调用
    *   例如将读取10MB文件(非异步)，这些文件在磁盘中的块未必是联系的，即10MB文件内容不再操作系统的缓存中，可能需要多次驱动硬盘寻址，导致进程休眠或等待。这样可以把文件分为1000份，每份10KB，这样读取的时间就是可控的，系统可以及时地处理其他请求。
3.  等待系统的响应从而导致进程空转时，使用定时器划分阶段
4.  如果阻塞方法完全无法继续划分，则必须使用独立的进程执行这个阻塞方法

## 3. 进程管理

Nginx采用一个`master`管理进程，多个`worker`工作进程的设计方式，还包括一个可选的`cache manager`进程以及`cache loader`进程。

Nginx的`worker`代码包括核心和功能模块，Nginx的核心是负责维持一个紧凑的运行循环(tight run-loop)，并执行相应的部分模块的代码、每个请求处理阶段。模块包括Nginx在表现层和业务层的功能。模块读取和写入到网络和硬盘，修改内容，出站(outbound)过滤，应用服务器(apply server-side)包括动作，传递请求给上游代理服务器。

Nginx并没有为每个`worker`分配连接，这个工作是由操作系统内核做的。启动后，`worker`创建一组初始的监听套接字 ，然后不断接受，读取和写入到sockets，同时处理HTTP请求和响应。

由于Nginx会产生多个`worker`，所以它在多核的架构中扩展的很好。每个核一个`worker`可以充分地利用多核的优势，防止颠簸和锁，并且在单线程的的`worker`进程中没有资源匮乏和资源控制机制。该模型还允许扩展更多的跨物理存储设备，有利于更大的磁盘利用率，避免磁盘I/O阻塞。

根据磁盘的利用和CPU的负载类型，Nginx的`worker`数量可以调整。一般来说，如果负载模式是CPU密集型处理，例如，TCP/IP的很多，做的SSL或压缩时，`worker`的数量应该和核的数目相同；如果负载大多数是在磁盘上，如在磁盘上做不同的内容服务或代理，那么`worker`的数量应该是核的1.5到2倍。

<img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/3_zpsbb4840cf.png" alt="1 process per core"/>

Nginx所有的进程使用的是内存共享的通信机制。`master`运行作为root用户，`cache manager`，`cache loader`和`worker`作为非特权用户运行。`master`的功能如下：

*   读取和验证配置
*   创建，绑定和关闭socket
*   启动，终止和维护配置数量的`worker`进程
*   在不中断服务的情况下重新配置
*   无需停止的系统升级 (启动新的进程，如果有必要则回滚)
*   编译嵌入式Perl脚本
*   日志文件

`cache loader`是负责检查磁盘上的缓存项和填充缓存元数据到Nginx的in-memory数据库。 从本质上讲，`cache loader`准备Nginx的实例用来在工作在一个专门分配的目录结构存储的磁盘文件上。它遍历目录，检查缓存内容元数据、更新共享内存中的相关条目，然后退出时准备给下次使用。

缓存管理器主要是负责缓存过期和失效。 在Nginx的正常运行时，它驻留在内存中；在失败的情况下，它由主进程重新启动。

## 4. 跨平台实现

Nginx有两个特点：跨平台、使用C语言实现。这两个特点导致Nginx不宜使用一些第三方中间件提供的容器和算法，并且C语言与每一个操作系统都是强相关的，且C库对操作系统的某些系统调用封装的方法并不是跨平台的。

对于这种情况，Nginx的解决方法很简单，在这些必须特殊化处理的地方，对每个操作系统都给一份特意化的实现。而对于基础的数据结构和算法，Nginx则完全从头实现了一遍，如动态数组、链表、二叉排序树、散列表等等。

要学习这些数据结构和算法的实现时可以看看Nginx源码，有些设计思路还是非常值得借鉴的，例如双向链表并不存储元素，只是存储指针，而且提供了简单的插入排序法。