---
layout: post
title: "C/C++ Byte Alignment"
date: 2014-04-22 02:18
comments: true
categories: language
tags: [alignment, insight, c++]
---

**字节对齐的细节和编译器实现相关，但一般而言，满足三个准则**：

1. 结构体变量的首地址能够被其**最宽基本类型**成员的大小所整除；
1. 结构体每个成员相对于结构体首地址的偏移量（offset）都是**成员大小的整数倍**，如有需要编译器会在成员之间加上填充字节（internal adding）；
1. 结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员之后加上填充字节（trailing padding）。

需要仔细体会上面的三个准则。

<!--more-->

- 结构体某个成员相对于结构体首地址的偏移量可以通过宏offsetof()来获得，这个宏也在stddef.h中定义，如下：

		#define offsetof(s,m) (size_t)&(((s *)0)->m)

- 基本类型是指前面提到的像char、short、int、float、double这样的内置数据类型。这里所说的“数据宽度”就是指其sizeof的大小。由于结构体的成员可以是复合类型，比如另外一个结构体，所以在寻找最宽基本类型成员时，应当包括复合类型成员的子成员，而不是把复合成员看成是一个整体。但在确定复合类型成员的偏移位置时则是将复合类型作为整体看待。

		struct S1
		{
		    char c;
		    int i;
		};

		struct S3
		{
		    char c1;
		    S1 s;
		    char c2;
		};

	S1的最宽简单成员的类型为int，S3在考虑最宽简单类型成员时是将S1“打散”看的，所以S3的最宽简单类型为int。这样，通过S3定义的变量，其存储空间首地址需要被4整除，整个sizeof(S3)的值也应该被4整除。

	c1的偏移量为0，s的偏移量呢？这时s是一个整体，它作为结构体变量也满足前面三个准则，所以其大小为8，偏移量为4，c1与s之间便需要3个填充字节，而c2与s之间就不需要了，所以c2的偏移量为12，算上c2的大小为13，13是不能被4整除的，这样末尾还得补上3个填充字节。最后得到sizeof(S3)的值为16。

##` #pragma pack`

`#pragma pack`规定的对齐长度，实际使用的规则是：

结构，联合，或者类的数据成员，第一个放在偏移为0的地方，以后每个数据成员的对齐，按照`#pragma pack`指定的数值和这个数据成员自身长度中，比较小的那个进行。也就是说，当`#pragma pack`的值等于或超过所有数据成员长度的时候，这个值的大小将不产生任何效果。而结构整体的对齐，则按照结构体中最大的数据成员和`#pragma pack`指定值之间，较小的那个进行。

	   #pragma pack(4)
	　　class TestB
	　　{
	　　public:
	　　　　int aa; //第一个成员，放在[0,3]偏移的位置，
	　　　　char a; //第二个成员，自身长为1，#pragma pack(4),取小值，也就是1，所以
	这个成员按一字节对齐，放在偏移[4]的位置。
	　　　　short b; //第三个成员，自身长2，#pragma pack(4)，取2，按2字节对齐，所以
	放在偏移[6,7]的位置。
	　　　　char c; //第四个，自身长为1，放在[8]的位置。
	　　};

这个类实际占据的内存空间是9字节类之间的对齐，是按照类内部最大的成员的长度，和`#pragma pack`规定的值之中较小的一个对齐的。所以这个例子中，类之间对齐的长度是`min(sizeof(int),4)`，也就是4。9按照4字节圆整的结果是12，所以`sizeof(TestB)`是12。

		#pragma pack(2)
	    class TestB
	　　{
	　　public:
	　　　　int aa; //第一个成员，放在[0,3]偏移的位置，
	　　　　char a; //第二个成员，自身长为1，#pragma pack(4),取小值，也就是1，所以
	这个成员按一字节对齐，放在偏移[4]的位置。
	　　　　short b; //第三个成员，自身长2，#pragma pack(4)，取2，按2字节对齐，所以
	放在偏移[6,7]的位置。
	　　　　char c; //第四个，自身长为1，放在[8]的位置。
	　　};

可以看出，上面的位置完全没有变化，只是类之间改为按2字节对齐，9按2圆整的结果是10。所以`sizeof(TestB)`是10。

		#pragma pack(4)
	　　class TestC
	　　{
	　　public:
	　　　　char a;//第一个成员，放在[0]偏移的位置，
	　　　　short b;//第二个成员，自身长2，#pragma pack(4)，取2，按2字节对齐，所以
	放在偏移[2,3]的位置。
	　　　　char c;//第三个，自身长为1，放在[4]的位置。
	　　};

整个类的大小是5字节，按照`min(sizeof(short),4)`字节对齐，也就是2字节对齐，结果是6