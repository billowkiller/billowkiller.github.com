---
layout: post
title: "Signal and Thread"
date: 2014-06-28 03:18
comments: true
categories: linux
tags: [linux, signal, thread]
---


类UNIX信号以前是专为进程设计的，它比线程的出现早了很多年。当线程模型出现后，专家们试图也在线程上实现信号，这导致了一个问题：即使是在基于进程的编程模式中，信号的处理也可能是很复杂的，因为它打断了正在运行的thread of control， 在signal handler中只能调用可重入函数，修改全局变量的类型必须是`sig_atomic_t`类型，防止内存访问优化； 而把线程引入编程范型，就使信号的处理变得更加复杂。

**避免信号和线程一起使用是明智的选择。**但是，将他们分开又是不可能或不实际的。只要有可能的话，仅仅在主线程内使用`pthread_sigmask()`来屏蔽信号，然后同步地在专用线程中使用`sigwait()`来处理信号。

## 信号模型映射到线程模型 ##

为了理解信号模型是怎样映射到线程模型的，我们需要知道信号模型的哪些方面是影响进程层面的（process-wide），哪些方面只会影响某个线程的。下面列出几点:

1. signal actions 是process-wide。如果一个没有处理的信号的默认动作是停止SIGSTOP或终止SIGKILL(该动作是让整个进程停止或终止，而不是只针对某个线程)，那么不管这个信号是发送给哪个线程，整个进程都会停止或终止。
2. signal dispositions信号部署是process-wide。每个线程都有自己的信号屏蔽字，但是**信号的处理是进程中所有线程共享的**。这意味着尽管每个线程可以阻止某些信号，但当线程修改了与某个信号相关的处理行为之后，所有的线程都必须共享这个处理行为的改变。
3. 信号通常是被发送到**任意一个线程**，为了保证不会在多线程进程中一个信号多次被执行。但是以下几种情况是传递到**单个线程**的：
	- 信号与硬件故障或计时器超时相关。
	- 当线程尝试向一个broken pipe写数据时，会产生一个SIGPIPE。
	- 使用`pthread_kill()`或者`pthread_sigqueue()`。这些函数允许一个线程发送信号到同一进程的另一个线程。
4. **信号掩码(signal mask)是线程私用的。**在多线程的进程中，不存在process-wide的信号掩码。线程可以使用`pthread_sigmask()`来独立的屏蔽某些信号。通过这种方法，程序员可以控制那些线程响应那些信号。当线程被创建时，它将继承创建它的线程的信号掩码。
5. **内核为每个线程和进程分别维护了一个未决信号的表**。当使用`sigpending()`时，该函数返回的是整个进程未决信号表和调用该函数的线程的未决信号表的并集。当新线程被创建时，线程的pending signals被设置为空。当线程A阻塞某个信号S后，发送到A中的信号S将会被挂起，直到线程取消了对信号S的阻塞。
6. 如果一个信号处理函数打断了`pthread_mutex_lock()`，该**函数会自动的重新执行**。如果信号处理函数打断了`pthread_cond_wait()`，该函数要么自动重新自行（linux是这样实现的），或者返回0（这时应用要检查返回值，判断是否为假唤醒）。

## 异步信号的处理 ##

一个函数要么是可重入的（reentrant）,要么是不能被信号处理函数打断的，我们把这种函数叫做是`async-signal-safe`的。调用非`async-signal-safe`的函数是危险的，比如，考虑在线程A中，我们调用`malloc()`来进行内存分配，`malloc()`刚用互斥量锁住了全局链表，这是异步信号到达，在信号处理函数中也调用`malloc()`，这时该函数会阻塞在互斥量上，形成死锁（这个例子在单线程的进程中也会出现）。Pthread API不是`async-signal-safe`的，也就是说在信号处理函数中不要使用pthread相关的函数。

**解决这个问题**的最好办法是，在不打断正常程序的前提下，把所有的异步信号都在同一处处理。在单线程程序中，这是做不到的，因为所有发送的信号都会打断程序。而在多线程程序中，我们可以<u>单独创建一个线程来接受信号，处理需要的信号，而不会打断其他线程的工作。</u>

上面举的这个例子中还有一点没说到，就是**信号处理函数也会被其他信号所打断**。那我们怎么处理这个问题呢？<u>在处理信号之前，对所有的异步信号进行阻塞，等工作处理完毕后，再恢复阻塞的信号。</u>这个工作就靠下面这个函数执行：

    int sigwait(const sigset_t *set, int *sig)

- `sigwait()`的好处在于它可以简化信号处理，允许把异步产生的信号用同步方式处理。
- 调用`sigwait()`等待的信号必须在调用线程中屏蔽，通常我们在所有线程中都会屏蔽。
- 信号仅仅被交付一次。如果两个线程在`sigwait()`上阻塞（等待同一个信号），只有一个线程（不确定的线程）将收到送给进程的信号。这意味着不能让两个独立的子系统使用`sigwait()`来捕获相同的信号。信号捕获`sigaction`建立的信号处理程序和`sigwait`也同样只有一个可以执行。