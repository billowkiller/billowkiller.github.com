<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tags: google | Billowkiller's Blog]]></title>
  <link href="http://billowkiller.github.io/blog/tags/google/atom.xml" rel="self"/>
  <link href="http://billowkiller.github.io/"/>
  <updated>2015-12-03T12:08:28+08:00</updated>
  <id>http://billowkiller.github.io/</id>
  <author>
    <name><![CDATA[wutao]]></name>
    <email><![CDATA[billowkiller@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[google论文：MapReduce]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/googlelun-wen-mapreduce/"/>
    <updated>2013-05-14T01:09:00+08:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/googlelun-wen-mapreduce</id>
    <content type="html"><![CDATA[<p>论文：<a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en//archive/mapreduce-osdi04.pdf">英文版</a>，<a href="http://blademaster.ixiezi.com/2010/03/27/google-mapreduce%E4%B8%AD%E6%96%87%E7%89%88/">中文版</a></p>

<hr />

<ol>
  <li>
    <h2 id="section">导论</h2>
  </li>
</ol>

<h3 id="section-1">1.1 定义</h3>

<p>先给个定义：
MapReduce是一个编程模型，也是一个处理和生成超大数据集的算法模型的相关实现。用户首先创建一个Map函数处理一个基于key/value
pair的数据集合，输出中间的基于key/value
pair的数据集合；然后再创建一个Reduce函数用来合并所有的具有相同中间key值的中间value值。</p>

<p>使用这个抽象模型，我们只要表述我们想要执行的简单运算即可，而不必关心并行计算、容错、数据分布、负载均衡等复杂的细节，这些问题都被封装在了一个库里面。设计这个抽象模型的灵感来自Lisp和许多其他函数式语言的Map和Reduce的原语。</p>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/mr2_zps9c617225.png" alt="big picture of MapReduce" /></p>

<!--more-->
<p>### 1.2 概述</p>

<ul>
  <li>Programmers must specify:
    <ul>
      <li>map (k, v) → &lt;k’, v’&gt;*</li>
      <li>reduce (k’, v’) → &lt;k’, v’&gt;*
        <ul>
          <li>All values with the same key are reduced together</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Optionally, also:
    <ul>
      <li>partition (k’, number of partitions) → partition for k’
        <ul>
          <li>Often a simple hash of the key, e.g., hash(k’) mod n</li>
          <li>Divides up key space for parallel reduce operations</li>
        </ul>
      </li>
      <li>combine (k’, v’) → &lt;k’, v’&gt;*
        <ul>
          <li>Mini-reducers that run in memory after the map phase</li>
          <li>Used as an optimization to reduce network traffic</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The execution framework handles everything else…
    <ul>
      <li>Scheduling: assigns workers to map and reduce tasks</li>
      <li>“Data distribution”: moves processes to data</li>
      <li>Synchronization: gathers, sorts, and shuffles intermediate data</li>
      <li>Errors and faults: detects worker failures and restarts</li>
    </ul>
  </li>
  <li>Limited control over data and execution flow
    <ul>
      <li>All algorithms must expressed in m, r, c, p</li>
    </ul>
  </li>
  <li>You don’t know:
    <ul>
      <li>Where mappers and reducers run</li>
      <li>When a mapper or reducer begins or finishes</li>
      <li>Which input a particular mapper is processing</li>
      <li>Which intermediate key a particular reducer is processing</li>
    </ul>
  </li>
</ul>

<ol>
  <li>
    <h2 id="section-2">实现</h2>
  </li>
</ol>

<h3 id="section-3">2.1 流程</h3>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/mr1_zps85dad9ca.png" alt="Execution Overview" height="500px" /></p>

<p>上图展示了我们的MapReduce实现中操作的全部流程。</p>

<ol>
  <li>用户程序首先调用的MapReduce库将输入文件分成M个数据片段，每个数据片段的大小一般从16MB到64MB。然后用户程序在机群中创建大量的程序副本。</li>
  <li>这些程序副本中的有一个特殊的程序–master。副本中其它的程序都是worker程序，由master分配任务。有M个Map任务和R个Reduce任务将被分配，master将一个Map任务或Reduce任务分配给一个空闲的worker。</li>
  <li>被分配了map任务的worker程序读取相关的输入数据片段，从输入的数据片段中解析出key/value
pair，然后把key/value
pair传递给用户自定义的Map函数，由Map函数生成并输出的中间key/value
pair，并缓存在内存中。</li>
  <li>缓存中的key/value
pair通过分区函数分成R个区域，之后周期性的写入到本地磁盘上。缓存的key/value
pair在本地磁盘上的存储位置将被回传给master，由master负责把这些存储位置再传送给Reduce
worker。</li>
  <li>当Reduce
worker程序接收到master程序发来的数据存储位置信息后，使用RPC从Map
worker所在主机的磁盘上读取这些缓存数据。当Reduce
worker读取了所有的中间数据后，通过对key进行排序后使得具有相同key值的数据聚合在一起。由于许多不同的key值会映射到相同的Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序。</li>
  <li>Reduce
worker程序遍历排序后的中间数据，对于每一个唯一的中间key值，Reduce
worker程序将这个key值和它相关的中间value值的集合传递给用户自定义的Reduce函数。Reduce函数的输出被追加到所属分区的输出文件。</li>
  <li>当所有的Map和Reduce任务都完成之后，master唤醒用户程序。在这个时候，在用户程序里的对MapReduce调用才返回。</li>
</ol>

<h3 id="mapreduce">2.2 map和Reduce的同步</h3>

<ul>
  <li>Cleverly-constructed data structures
    <ul>
      <li>Bring partial results together</li>
    </ul>
  </li>
  <li>Sort order of intermediate keys
    <ul>
      <li>Control order in which reducers process keys</li>
    </ul>
  </li>
  <li>Partitioner
    <ul>
      <li>Control which reducer processes which keys</li>
    </ul>
  </li>
  <li>Preserving state in mappers and reducers
    <ul>
      <li>Capture dependencies across multiple keys and values</li>
    </ul>
  </li>
</ul>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/mr3_zps5ead0c7b.png" alt="map和Reduce的同步" height="300px" /></p>

<h3 id="section-4">2.3 本地聚合</h3>

<ul>
  <li>Ideal scaling characteristics:
    <ul>
      <li>Twice the data, twice the running time</li>
      <li>Twice the resources, half the running time</li>
    </ul>
  </li>
  <li>Why can’t we achieve this?
    <ul>
      <li>Synchronization requires communication</li>
      <li>Communication kills performance</li>
    </ul>
  </li>
  <li>Thus… avoid communication!
    <ul>
      <li>Reduce intermediate data via local aggregation</li>
      <li>Combiners can help</li>
    </ul>
  </li>
</ul>

<h3 id="shuffle-and-sort">2.4 Shuffle and Sort</h3>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/mr4_zps7ee59e35.png" alt="Shuffle and Sort" height="400px" /></p>

<h3 id="master">2.5 Master</h3>

<p>Master持有一些数据结构，它存储每一个Map和Reduce任务的状态（空闲、工作中或完成)，以及Worker机器(非空闲任务的机器)的标识。</p>

<p>Master就像一个数据管道，中间文件存储区域的位置信息通过这个管道从Map传递到Reduce。因此，对于每个已经完成的Map任务，master存储了Map任务产生的R个中间文件存储区域的大小和位置。当Map任务完成时，Master接收到位置和大小的更新信息，这些信息被逐步递增的推送给那些正在工作的Reduce任务。</p>

<p>master周期性的ping每个worker。如果在一个约定的时间范围内没有收到worker返回的信息，master将把这个worker标记为失效。所有由这个失效的worker完成的Map任务被重设为初始的空闲状态，之后这些任务就可以被安排给其他的worker。同样的，worker失效时正在运行的Map或Reduce任务也将被重新置为空闲状态，等待重新调度。</p>

<p>master周期性的将数据写入磁盘，即检查点（checkpoint）。如果这个master任务失效了，可以从最后一个检查点开始启动另一个master进程。然而，由于只有一个master进程，master失效后再恢复是比较麻烦的，因此我们现在的实现是如果master失效，就中止MapReduce运算。客户可以检查到这个状态，并且可以根据需要重新执行MapReduce操作。</p>

<ol>
  <li>
    <h2 id="section-5">性能优化</h2>
  </li>
</ol>

<h3 id="straggler">3.1 straggler</h3>

<p>影响一个MapReduce的总执行时间最通常的因素是straggler(落伍者)：在运算过程中，如果有一台机器花了很长的时间才完成最后几个Map或Reduce任务，导致MapReduce操作总的执行时间超过预期。</p>

<p>当一个MapReduce操作接近完成的时候，master调度备用（backup）任务进程来执行剩下的、处于处理中状态（in-progress）的任务。无论是最初的执行进程、还是备用（backup）任务进程完成了任务，我们都把这个任务标记成为已经完成。我们调优了这个机制，通常只会占用比正常操作多几个百分点的计算资源。我们发现采用这样的机制对于减少超大MapReduce操作的总处理时间效果显著。</p>

<h3 id="partitioning-function">3.2 分区函数(partitioning function)</h3>

<p>我们在中间key上使用分区函数来对数据进行分区，之后再输入到后续任务执行进程。一个缺省的分区函数是使用hash方法(比如，hash(key)
mod
R)进行分区。hash方法能产生非常平衡的分区。然而，有的时候，其它的一些分区函数对key值进行的分区将非常有用。</p>

<p>使用“hash(Hostname(urlkey)) mod
R”作为分区函数就可以把所有来自同一个主机的URLs保存在同一个输出文件中。</p>

<h3 id="section-6">3.3 顺序保证</h3>

<p>在给定的分区中，中间key/value
pair数据的处理顺序是按照key值增量顺序处理的。</p>

<h3 id="combiner">3.4 Combiner函数</h3>

<p>用户指定一个可选的combiner函数，combiner函数首先在本地将这些记录进行一次合并，然后将合并的结果再通过网络发送出去。</p>

<p>一般情况下，Combiner和Reduce函数是一样的。Combiner函数和Reduce函数之间唯一的区别是MapReduce库怎样控制函数的输出。</p>

<h3 id="section-7">3.5 跳过损坏的记录</h3>

<ul>
  <li>Map/Reduce functions sometimes fail for particular inputs
    <ul>
      <li>Best solution is to debug &amp; fix
        <ul>
          <li>Not always possible \~ third-party source libraries</li>
        </ul>
      </li>
      <li>On segmentation fault:
        <ul>
          <li>Send UDP packet to master from signal handler</li>
          <li>Include sequence number of record being processed</li>
        </ul>
      </li>
      <li>If master sees two failures for same record:
        <ul>
          <li>Next worker is told to skip the record</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>
    <h2 id="section-8">要点和例子</h2>
  </li>
</ol>

<h3 id="points-need-to-be-emphasized">4.1 Points need to be emphasized</h3>

<ul>
  <li>No reduce can begin until map is complete</li>
  <li>Master must communicate locations of intermediate files</li>
  <li>Tasks scheduled based on location of data</li>
  <li>If map worker fails any time before reduce finishes, task must be
completely rerun</li>
  <li>MapReduce library does most of the hard work for us!</li>
</ul>

<h3 id="section-9">4.2 例子</h3>

<ol>
  <li>分布式的Grep：Map函数输出匹配某个模式的一行，Reduce函数是一个恒等函数，即把中间数据复制到输出。</li>
  <li>计算URL访问频率：Map函数处理日志中web页面请求的记录，然后输出(URL,1)。Reduce函数把相同URL的value值都累加起来，产生(URL,记录总数)结果。</li>
  <li>倒转网络链接图：Map函数在源页面（source）中搜索所有的链接目标（target）并输出为(target,source)。Reduce函数把给定链接目标（target）的链接组合成一个列表，输出(target,list(source))。</li>
  <li>每个主机的检索词向量：检索词向量用一个(词,频率)列表来概述出现在文档或文档集中的最重要的一些词。Map函数为每一个输入文档输出(主机名,检索词向量)，其中主机名来自文档的URL。Reduce函数接收给定主机的所有文档的检索词向量，并把这些检索词向量加在一起，丢弃掉低频的检索词，输出一个最终的(主机名,检索词向量)。</li>
  <li>倒排索引：Map函数分析每个文档输出一个(词,文档号)的列表，Reduce函数的输入是一个给定词的所有（词，文档号），排序所有的文档号，输出(词,list（文档号）)。所有的输出集合形成一个简单的倒排索引，它以一种简单的算法跟踪词在文档中的位置。</li>
  <li>
    <p>分布式排序：Map函数从每个记录提取key，输出(key,record)。Reduce函数不改变任何的值。这个运算依赖分区机制(在4.1描述)和排序属性(在4.2描述)。</p>
  </li>
  <li>
    <h2 id="hadoop">Hadoop</h2>
  </li>
</ol>

<p><strong>术语对照</strong></p>

<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="109">
<p class="TableContents" align="center"><span style="font-size: 14px;"><strong>翻译</strong></span></p>
</td>
<td width="136">
<p class="TableContents" align="center"><span style="font-size: 14px;"><strong>Hadoop</strong><strong>术语</strong></span></p>
</td>
<td width="142">
<p class="TableContents" align="center"><span style="font-size: 14px;"><strong>Google</strong><strong>术语</strong></span></p>
</td>
<td width="277">
<p class="TableContents" align="center"><span style="font-size: 14px;"><strong>相关解释</strong></span></p>
</td>
</tr>
<tr>
<td width="109">
<p class="TableContents" align="center"><span style="font-size: 14px;">作业</span></p>
</td>
<td width="136">
<p class="TableContents" align="center"><span style="font-size: 14px;">Job</span></p>
</td>
<td width="142">
<p class="TableContents" align="center"><span style="font-size: 14px;">Job</span></p>
</td>
<td width="277">
<p class="TableContents"><span style="font-size: 14px;">用户的每一个计算请求，就称为一个作业。</span></p>
</td>
</tr>
<tr>
<td width="109">
<p class="TableContents" align="center"><span style="font-size: 14px;">作业服务器</span></p>
</td>
<td width="136">
<p class="TableContents" align="center"><span style="font-size: 14px;">JobTracker</span></p>
</td>
<td width="142">
<p class="TableContents" align="center"><span style="font-size: 14px;">Master</span></p>
</td>
<td width="277">
<p class="TableContents"><span style="font-size: 14px;">用户提交作业的服务器，同时，它还负责各个作业任务的分配，管理所有的任务服务器。</span></p>
</td>
</tr>
<tr>
<td width="109">
<p class="TableContents" align="center"><span style="font-size: 14px;">任务服务器</span></p>
</td>
<td width="136">
<p class="TableContents" align="center"><span style="font-size: 14px;">TaskTracker</span></p>
</td>
<td width="142">
<p class="TableContents" align="center"><span style="font-size: 14px;">Worker</span></p>
</td>
<td width="277">
<p class="TableContents"><span style="font-size: 14px;">任劳任怨的工蜂，负责执行具体的任务。</span></p>
</td>
</tr>
<tr>
<td width="109">
<p class="TableContents" align="center"><span style="font-size: 14px;">任务</span></p>
</td>
<td width="136">
<p class="TableContents" align="center"><span style="font-size: 14px;">Task</span></p>
</td>
<td width="142">
<p class="TableContents" align="center"><span style="font-size: 14px;">Task</span></p>
</td>
<td width="277">
<p class="TableContents"><span style="font-size: 14px;">每一个作业，都需要拆分开了，交由多个服务器来完成，拆分出来的执行单位，就称为任务。</span></p>
</td>
</tr>
<tr>
<td width="109">
<p class="TableContents" align="center"><span style="font-size: 14px;">备份任务</span></p>
</td>
<td width="136">
<p class="TableContents" align="center"><span style="font-size: 14px;">Speculative Task</span></p>
</td>
<td width="142">
<p class="TableContents" align="center"><span style="font-size: 14px;">Buckup Task</span></p>
</td>
<td width="277">
<p class="TableContents"><span style="font-size: 14px;">每一个任务，都有可能执行失败或者缓慢，为了降低为此付出的代价，系统会未雨绸缪的实现在另外的任务服务器上执行同样一个任务，这就是备份任务。</span></p>
</td>
</tr>
</tbody>
</table>
<p>具体可以看博文<a href="http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html">http://www.cnblogs.com/duguguiyu/archive/2009/02/28/1400278.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[google论文：GFS]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/googlelun-wen-gfs/"/>
    <updated>2013-05-14T01:09:00+08:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/googlelun-wen-gfs</id>
    <content type="html"><![CDATA[<p>论文：<a href="http://www.cs.rochester.edu/meetings/sosp2003/papers/p125-ghemawat.pdf">英文版</a>，<a href="http://blademaster.ixiezi.com/2010/03/27/the-google-file-system%E4%B8%AD%E6%96%87%E7%89%88/">中文版</a></p>

<hr />

<ol>
  <li>
    <h2 id="section">导论</h2>
  </li>
</ol>

<p>先给个定义：GFS是一个可扩展的分布式文件系统，用于大型的、分布式的、对大量数据进行访问的应用。它运行于廉价的普通硬件上，但可以提供容错功能。它可以给大量的用户提供总体性能较高的服务。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/GoogleFileSystemGFS.svg/500px-GoogleFileSystemGFS.svg.png" alt="Google File System. Designed for system-to-system interaction, and not for user-to-system interaction. The chunk servers replicate the data automatically" /></p>

<p><strong>Assumptions in Google File System (GFS)</strong></p>

<ul>
  <li>GFS should be built with commodity hardware
    <ul>
      <li>Inexpensive disks and machines</li>
    </ul>
  </li>
  <li>GSF stores a modest number of large files
    <ul>
      <li>GSF stores a modest number of large files
        <ul>
          <li>e.g. Big-table, Map-Reduce records</li>
        </ul>
      </li>
      <li>Do not optimize for small files</li>
    </ul>
  </li>
  <li>Workloads
    <ul>
      <li>Large streaming reads (1MB or more) and small random reads (a
few KBs)</li>
      <li>Sequential appends to files by hundreds of data producers
        <ul>
          <li>Utilizing the fact that files are seldom modified again</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>High sustained bandwidth is more important than latency
    <ul>
      <li>Response time for individual read and write is not critical
<!--more-->
<strong>Prerequisite</strong></li>
    </ul>
  </li>
</ul>

<ol>
  <li>组件失效被认为是常态事件，而不是意外事件。</li>
  <li>以通常的标准衡量，我们的文件非常巨大。</li>
  <li>绝大部分文件的修改是采用在文件尾部追加数据，而不是覆盖原有数据的方式。</li>
  <li>应用程序和文件系统API的协同设计提高了整个系统的灵活性。e.g.
    <ul>
      <li>放松了在GFS一致性模型的要求</li>
      <li>引入了原子性的记录追加操作</li>
      <li>三个冗余的数据可以不是位一致，但是要求校验和验证</li>
    </ul>
  </li>
  <li>系统的工作负载
    <ul>
      <li>读操作
        <ul>
          <li>大规模的流式读取</li>
          <li>小规模的随机读取</li>
        </ul>
      </li>
      <li>写操作
        <ul>
          <li>许多大规模的、顺序的、数据追加方式的写操作</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>系统必须高效的、行为定义明确的实现多客户端并行追加数据到同一个文件里
    <ul>
      <li>使用最小的同步开销来实现的原子的多路追加数据操作是必不可少的</li>
      <li>文件可以在稍后读取，或者是消费者在追加的操作的同时读取文件</li>
    </ul>
  </li>
  <li>高性能的稳定网络带宽远比低延迟重要
    <ul>
      <li>高速率的、大批量的处理数据</li>
      <li>极少有程序对单一的读写操作有严格的响应时间要求</li>
    </ul>
  </li>
</ol>

<h2 id="section-1"><strong>2. 架构</strong></h2>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/ache_zps14a9a2bc.png" alt="GFS Achitecture" height="300px" /></p>

<ul>
  <li>Files are divided into chunks</li>
  <li>Fixed-size chunks (64MB)</li>
  <li>Replicated over chunkservers, called replicas</li>
  <li>Unique 64-bit chunk handles</li>
  <li>
    <p>Chunks as Linux files</p>
  </li>
  <li>
    <p>Single master</p>
  </li>
  <li>Multiple chunkservers
    <ul>
      <li>Grouped into Racks</li>
      <li>Connected through switches</li>
    </ul>
  </li>
  <li>Multiple clients</li>
  <li>Master/chunkserver coordination
    <ul>
      <li>HeartBeat messages</li>
    </ul>
  </li>
</ul>

<p><strong><em>注意逻辑的Master节点和物理的Master服务器的区别</em></strong></p>

<h3 id="master">Master节点</h3>

<p>Master节点管理所有的文件系统元数据。这些元数据包括名字空间、访问控制信息、文件和Chunk的映射信息、以及当前Chunk的位置信息。Master节点还管理着系统范围内的活动，比如，Chunk租用管理、失效Chunk的回收、以及Chunk在Chunk服务器之间的迁移。</p>

<p>单一的Master节点可以通过全局的信息精确定位Chunk的位置以及进行复制决策。另外，我们必须减少对Master节点的读写，避免Master节点成为系统的瓶颈。客户端并不通过Master节点读写文件数据。反之，客户端向Master节点询问它应该联系的Chunk服务器。客户端将这些元数据信息缓存一段时间，后续的操作将直接和Chunk服务器进行数据读写操作。</p>

<h3 id="master-1">Master服务器</h3>

<p>Master服务器存储3种主要类型的元数据，包括：文件和Chunk的命名空间、文件和Chunk的对应关系、每个Chunk副本的存放地点。所有的元数据都保存在Master服务器的内存中。前两种类型的元数据（命名空间、文件和Chunk的对应关系）同时也会以记录变更日志的方式记录在操作系统的系统日志文件中，日志文件存储在本地磁盘上，同时日志会被复制到其它的远程Master服务器上。采用保存变更日志的方式，我们能够简单可靠的更新Master服务器的状态，并且不用担心Master服务器崩溃导致数据不一致的风险。Master服务器不会持久保存Chunk位置信息。Master服务器在启动时，或者有新的Chunk服务器加入时，向各个Chunk服务器轮询它们所存储的Chunk的信息。</p>

<p>Master服务器并不保存持久化保存哪个Chunk服务器存有指定Chunk的副本的信息。Master服务器只是在启动的时候轮询Chunk服务器以获取这些信息。Master服务器能够保证它持有的信息始终是最新的，因为它控制了所有的Chunk位置的分配，而且通过周期性的心跳信息监控Chunk服务器的状态。</p>

<ul>
  <li>简化了在有Chunk服务器加入集群、离开集群、更名、失效、以及重启的时候，Master服务器和Chunk服务器数据同步的问题。</li>
  <li>只有Chunk服务器才能最终确定一个Chunk是否在它的硬盘上。Master服务器无需维护一个这些信息的全局视图</li>
</ul>

<h3 id="section-2">操作日志</h3>

<p>操作日志包含了关键的元数据变更历史记录。这对GFS非常重要。这不仅仅是因为操作日志是元数据唯一的持久化存储记录，它也作为判断同步操作顺序的逻辑时间基线。文件和Chunk，连同它们的版本，都由它们创建的逻辑时间唯一的、永久的标识。</p>

<p>必须确保日志文件的完整，确保只有在元数据的变化被持久化后，日志才对客户端是可见的。把日志复制到多台远程机器，并且只有把相应的日志记录写入到本地以及远程机器的硬盘后，才会响应客户端的操作请求。</p>

<p>为了缩短Master启动的时间，我们必须使日志足够小。Master服务器在日志增长到一定量时对系统状态做一次Checkpoint，将所有的状态数据写入一个Checkpoint文件。在灾难恢复的时候，Master服务器就通过从磁盘上读取这个Checkpoint文件，以及重演Checkpoint之后的有限个日志文件就能够恢复系统。</p>

<p>由于创建一个Checkpoint文件需要一定的时间，所以Master服务器的内部状态被组织为一种格式，这种格式要确保在Checkpoint过程中不会阻塞正在进行的修改操作。</p>

<h3 id="section-3"><strong>一致性模型</strong></h3>

<ul>
  <li>Relaxed consistency model</li>
  <li>
    <p>Two types of mutations</p>

    <ul>
      <li>Writes
        <ul>
          <li>Cause data to be written at an application-specified file
offset</li>
        </ul>
      </li>
      <li>Record appends
        <ul>
          <li>Operations that append data to a file</li>
          <li>Cause data to be appended atomically at least once</li>
          <li>Offset chosen by GFS, not by the client</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>States of a file region after a mutation</p>

    <ul>
      <li>Consistent
        <ul>
          <li>All clients see the same data, regardless which replicas
they read from</li>
        </ul>
      </li>
      <li>Defined
        <ul>
          <li>consistent + all clients see what the mutation writes in its
entirety</li>
        </ul>
      </li>
      <li>Undefined
        <ul>
          <li>consistent +but it may not reflect what any one mutation has
written</li>
        </ul>
      </li>
      <li>Inconsistent
        <ul>
          <li>Clients see different data at different times</li>
          <li>The client retries the operation</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>经过了一系列的成功的修改操作之后，GFS确保被修改的文件region是已定义的，并且包含最后一次修改操作写入的数据。GFS通过以下措施确保上述行为：（a）
对Chunk的所有副本的修改操作顺序一致，（b）使用Chunk的版本号来检测副本是否因为它所在的Chunk服务器宕机而错过了修改操作而导致其失效。失效的副本不会再进行任何修改操作，Master服务器也不再返回这个Chunk副本的位置信息给客户端。它们会被垃圾收集系统尽快回收。</p>

<p>使用GFS的应用程序可以利用一些简单技术实现这个宽松的一致性模型，这些技术也用来实现一些其它的目标功能，包括：</p>

<ul>
  <li>尽量采用追加写入而不是覆盖</li>
  <li>Checkpoint
    <ul>
      <li>to verify how much data has been successfully written</li>
    </ul>
  </li>
  <li>自验证的写入操作
    <ul>
      <li>Checksums to detect and remove <em>padding</em></li>
    </ul>
  </li>
  <li>自标识的记录。
    <ul>
      <li>Unique Identifiers to identify and discard <em>duplicates</em></li>
    </ul>
  </li>
</ul>

<h2 id="section-4"><strong>3. 系统交互</strong></h2>

<ul>
  <li>Master uses leases to maintain a consistent mutation order among
replicas</li>
  <li>Primary is the chunkserver who is granted a chunk lease</li>
  <li>All others containing replicas are secondaries</li>
  <li>Primary defines a mutation order between mutations</li>
  <li>
    <p>All secondaries follows this order</p>
  </li>
  <li>
    <p>数据流和控制流分开</p>
  </li>
  <li>数据以管道的方式，顺序的沿着一个精心选择的Chunk服务器链推送
    <ul>
      <li>Data transfer is pipelined over TCP connections</li>
      <li>Each machine forwards the data to the “closest” machine</li>
      <li>全双工的交换网络</li>
    </ul>
  </li>
  <li><strong>Benefits</strong>：Avoid bottle necks and minimize latency</li>
</ul>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/c_zps5923b611.png" alt="Write control and Data Flow" /></p>

<ol>
  <li>客户机向Master节点询问哪一个Chunk服务器持有当前的租约，以及其它副本的位置。如果没有一个Chunk持有租约，Master节点就选择其中一个副本建立一个租约。</li>
  <li>Master节点将主Chunk的标识符以及其它副本（又称为secondary副本、二级副本）的位置返回给客户机。客户机缓存这些数据以便后续的操作。只有在主Chunk不可用，或者主Chunk回复信息表明它已不再持有租约的时候，客户机才需要重新跟Master节点联系。</li>
  <li>客户机把数据推送到所有的副本上。客户机可以以任意的顺序推送数据。Chunk服务器接收到数据并保存在它的内部LRU缓存中，一直到数据被使用或者过期交换出去。由于数据流的网络传输负载非常高，通过分离数据流和控制流，我们可以基于网络拓扑情况对数据流进行规划，提高系统性能，而不用去理会哪个Chunk服务器保存了主Chunk。</li>
  <li>当所有的副本都确认接收到了数据，客户机发送写请求到主Chunk服务器。这个请求标识了早前推送到所有副本的数据。主Chunk为接收到的所有操作分配连续的序列号，这些操作可能来自不同的客户机，序列号保证了操作顺序执行。它以序列号的顺序把操作应用到它自己的本地状态中。</li>
  <li>主Chunk把写请求传递到所有的二级副本。每个二级副本依照主Chunk分配的序列号以相同的顺序执行这些操作。</li>
  <li>所有的二级副本回复主Chunk，它们已经完成了操作。</li>
  <li>主Chunk服务器回复客户机。任何副本产生的任何错误都会返回给客户机。在出现错误的情况下，写入操作可能在主Chunk和一些二级副本执行成功。（如果操作在主Chunk上失败了，操作就不会被分配序列号，也不会被传递。）客户端的请求被确认为失败，被修改的region处于不一致的状态。我们的客户机代码通过重复执行失败的操作来处理这样的错误。在从头开始重复执行之前，客户机会先从步骤（3）到步骤（7）做几次尝试。</li>
</ol>

<h3 id="section-5">记录追加的原子性</h3>

<ul>
  <li>The client specifies only the data (not file offset)</li>
  <li>Similar to writes
    <ul>
      <li>Mutation order is determined by the primary</li>
      <li>All secondaries use the same mutation order</li>
    </ul>
  </li>
  <li>GFS appends data to the file at least once atomically
    <ul>
      <li>The chunk is padded if appending the record exceeds the maximum
size –&gt; <em>padding</em></li>
      <li>If a record append fails at any replica, the client retries the
operation –&gt; <em>record duplicates</em></li>
      <li>File region may be defined but interspersed with <em>inconsistent</em></li>
    </ul>
  </li>
</ul>

<h3 id="section-6">快照</h3>

<ul>
  <li>Goals
    <ul>
      <li>To quickly create branch copies of huge data sets</li>
      <li>To easily checkpoint the current state</li>
    </ul>
  </li>
  <li>Copy-on-write technique
    <ul>
      <li>Metadata for the source file or directory tree is duplicated</li>
      <li>Reference count for chunks are incremented</li>
      <li>Chunks are copied later at the first write</li>
    </ul>
  </li>
</ul>

<h3 id="master-operation"><strong>Master Operation</strong></h3>

<ul>
  <li>Namespaces are represented as a lookup table mapping full pathnames
to metadata</li>
  <li>Use locks over regions of the namespace to ensure proper
serialization</li>
  <li>
    <p>Each master operation acquires a set of locks before it runs</p>
  </li>
  <li>
    <p>GFS has no directory (i-node) structure</p>

    <ul>
      <li>Simply uses directory-like file names: /foo, /foo/bar
        <ul>
          <li>Thus listing files in a directory is slow</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Concurrent Access
    <ul>
      <li>Read lock on a parent path, write lock on the leaf file name
        <ul>
          <li>protect delete, rename and snapshot of in-use files</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Rebalancing
    <ul>
      <li>Places new replicas on chunk servers with below-average disk
space utilizations</li>
    </ul>
  </li>
  <li>Re-replication
    <ul>
      <li>When the number of replicas falls below 3 (or user-specified
threshold)
        <ul>
          <li>The master assigns the highest priority to copy (clone) such
chunks</li>
        </ul>
      </li>
      <li>Spread replicas of a chunk across racks</li>
    </ul>
  </li>
</ul>

<p><strong>Example of Locking Mechanism</strong></p>

<p>Preventing /home/user/foo from being created while /home/user is being
snapshotted to /save/user</p>

<ul>
  <li>Snapshot operation
    <ul>
      <li>Read locks on /home and /save</li>
      <li>Write locks on /home/user and /save/user</li>
    </ul>
  </li>
  <li>File creation
    <ul>
      <li>read locks on /home and /home/user</li>
      <li>write locks on /home/user/foo</li>
    </ul>
  </li>
  <li>Conflict locks on /home/user</li>
</ul>

<ol>
  <li>
    <h2 id="section-7">其他细节</h2>
  </li>
</ol>

<h3 id="section-8"><strong>垃圾回收</strong></h3>

<ul>
  <li>Deleted files
    <ul>
      <li>Deletion operation is logged</li>
      <li>File is renamed to a hidden name(deferred deletion)， then may be
removed later or get recovered</li>
      <li>The master regularly scans and removes hidden files, existed
more than three days
        <ul>
          <li>HeartBeat messages inform chunk servers of deleted chunks</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Orphaned chunks (unreachable chunks)
    <ul>
      <li>Identified and removed during a regular scan of the chunk
namespace</li>
    </ul>
  </li>
  <li>Stale replicas
    <ul>
      <li>Chunk version numbering
        <ul>
          <li>increases when the master grants a new lease of the chunk</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="replica-operations">Replica Operations</h3>

<ul>
  <li>Creation
    <ul>
      <li>Disk space utilization</li>
      <li>Number of recent creations on each chunkserver</li>
      <li>Spread across many racks</li>
    </ul>
  </li>
  <li>Re-replication
    <ul>
      <li>Prioritized: How far it is from its replication goal…</li>
      <li>The highest priority chunk is cloned first by copying the chunk
data directly from an existing replica</li>
    </ul>
  </li>
  <li>Rebalancing
    <ul>
      <li>Periodically</li>
    </ul>
  </li>
</ul>

<h3 id="fault-tolerance">Fault Tolerance</h3>

<ul>
  <li>Fast Recovery
    <ul>
      <li>The master and the chunk server are designed to restore their
state in seconds no matter how they terminated.</li>
      <li>Servers are routinely shut down just by killing the process</li>
    </ul>
  </li>
  <li>Master Replications
    <ul>
      <li>Master has the maps from file names to chunks</li>
      <li>One (primary) master manages chunk mutations
        <ul>
          <li>Several shadow masters are provided for read-only accesses
            <ul>
              <li>Snoop operation logs and apply these operations exactly
as the primary does</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Data Integrity
    <ul>
      <li>Corruption of stored data
        <ul>
          <li>High temperature of storage devices causes such errors</li>
        </ul>
      </li>
      <li>Checksums for each 64KB in a chunk
        <ul>
          <li>chunk servers verifies the checksum of data before sending
it to the client or other chunk servers</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google PageRank]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/google-pagerank/"/>
    <updated>2013-05-14T01:09:00+08:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/google-pagerank</id>
    <content type="html"><![CDATA[<p><strong>edited</strong> from <strong><em><a href="http://www.ams.org/samplings/feature-column/fcarc-pagerank">How Google Finds Your Needle in the Web’s Haystack</a></em></strong></p>

<hr />

<p>Google搜索的核心算法当然不止是PageRank，但PageRank确实是其中的核心部分。Google就曾经说过：“the
heart of our software is PageRank”.</p>

<p>Google的PageRank算法声称他们比较了一个月来网页的受欢迎程度从而确定哪个网页显得比较重要。根据Sergey
Brin和Lawrence
Page的说法，一个网页的重要性不仅仅包括他们自身的重要程度，还包括链接向这个网页的其他网页数目。</p>

<p>综合公式为：</p>

<p><img src="http://www.ams.org/featurecolumn/images/december2006/index_1.gif" alt="" /></p>

<p>呵呵，看到这个公式我第一反应就是，“我靠，这怎么整啊，这不是鸡生蛋，蛋生鸡”的问题吗？果然，下面就有解决办法。</p>

<p>我们将这个问题转化为一个数学问题。
<!--more-->
首先构造一个链接矩阵，<img src="http://www.ams.org/featurecolumn/images/december2006/index_2.gif" alt="" />。其中：</p>

<p><img src="http://www.ams.org/featurecolumn/images/december2006/index_3.gif" alt="" /></p>

<p>同时也创建一个向量<img src="http://www.ams.org/featurecolumn/images/december2006/index_4.gif" alt="" />，它的构成正是PageRank的值，也就是页面的相对重要程度。用数学表达式定义为：<img src="http://www.ams.org/featurecolumn/images/december2006/index_5.gif" alt="" /></p>

<p>这个表达式其实也就是向量 *I *为矩阵特征值为1的特征向量，也称呼它为H的固定向量。</p>

<p>下边是一个例子：</p>

<p><img src="http://www.ams.org/featurecolumn/images/december2006/goodnet.jpg" alt="" /></p>

<p><img src="http://www.ams.org/featurecolumn/images/december2006/matrix.0.gif" alt="" /> </p>

<p><img src="http://www.ams.org/featurecolumn/images/december2006/eigenvector.0.gif" alt="" /></p>

<p>这样看来，问题貌似得到了解决，我们获得了这8个网页的PageRank值。但是在现实中，这个矩阵的n为250亿，其中的大部分值为0，实际上，研究表明每个网页链接的平均数量是10，这表明每一列只有10个数值不为0。下面我们用一个叫<em>power
method</em>的方法来寻找矩阵的固定向量。</p>

<p><img src="http://www.ams.org/featurecolumn/images/december2006/index_6.gif" alt="" /></p>

<p><strong>General principle:</strong> The sequence <em>I<sup>k</sup></em> will converge to the
stationary vector <em>I</em>.</p>

<p>通过这个方法解释上面的例子</p>

<p>                                                  <center>                           &lt;table cellpadding=5 border=1&gt;   <tr>   &lt;td bgcolor=#ffffcc&gt; <em>I <sup>0</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>1</sup></em>     &lt;td bgcolor=#ffffcc&gt; <em>I <sup>2</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>3</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>4</sup></em>    &lt;td bgcolor=#ffffcc&gt; ...     &lt;td bgcolor=#ffffcc&gt; <em>I <sup>60</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>61</sup></em>    </tr>   <tr>   <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0.0278</td> <td> ...</td>    <td>0.06</td>    <td>0.06</td>    </tr>   <tr>   <td>0</td> <td>0.5</td> <td>0.25</td> <td>0.1667</td> <td>0.0833</td> <td> ...</td>    <td>0.0675</td>    <td>0.0675</td>    </tr>   <tr>   <td>0</td> <td>0.5</td> <td>0</td> <td>0</td> <td>0</td> <td> ...</td>    <td>0.03</td>    <td>0.03</td>    </tr>   <tr>   <td>0</td> <td>0</td> <td>0.5</td> <td>0.25</td> <td>0.1667</td> <td> ...</td>    <td>0.0675</td>    <td>0.0675</td>    </tr>   <tr>   <td>0</td> <td>0</td> <td>0.25</td> <td>0.1667</td> <td>0.1111</td> <td> ...</td>    <td>0.0975</td>    <td>0.0975</td>    </tr>   <tr>   <td>0</td> <td>0</td> <td>0</td> <td>0.25</td> <td>0.1806</td> <td> ...</td>    <td>0.2025</td>    <td>0.2025</td>    </tr>   <tr>   <td>0</td> <td>0</td> <td>0</td> <td>0.0833</td> <td>0.0972</td> <td> ...</td>    <td>0.18</td>    <td>0.18</td>    </tr>   <tr>   <td>0</td> <td>0</td> <td>0</td> <td>0.0833</td> <td>0.3333</td> <td> ...</td>    <td>0.295</td>    <td>0.295</td>    </tr>                              </center>                         <p>

得到的结果只是网页重要程度的相对比值，如果要的到最终的PageRank数值，还需要对它进行线性增加，使得它们的总和为1。

 

有三个问题自然地就提出来了：

-    <em>I<sup>k</sup></em>是否会汇聚到1
-   向量是否与<em>I<sup>0</sup></em>的取值无关
-   是否包含了我们想要的信息，也就是达到充分统计

现在我们对这三个问题还只能说No，但接下来我们将会修改我们的方法使得对这三个问题的回答得到肯定。

![](http://www.ams.org/featurecolumn/images/december2006/dangling.jpg)

with matrix

![](http://www.ams.org/featurecolumn/images/december2006/matrix.3.gif)

结果如下：

 <p>                                                 <center>   &lt;table cellpadding=5 border=1&gt;   <tr>   &lt;td bgcolor=#ffffcc&gt;<em>I <sup>0</sup></em>   &lt;td bgcolor=#ffffcc&gt;<em>I <sup>1</sup></em>    &lt;td bgcolor=#ffffcc&gt;<em>I <sup>2</sup></em>   &lt;td bgcolor=#ffffcc&gt;<em>I <sup>3</sup>=<em>I</em></em>   </tr>   <tr>   <td>1</td>   <td>0</td>   <td>0</td>   &lt;td align=center&gt;0   </tr>   <tr>   <td>0</td>   <td>1</td>   <td>0</td>   &lt;td align=center&gt;0   </tr>                              </center>                         <p>

上面例子的问题是P2并没有链接，它在每次迭代中获取了P1的一些权重，但是却不传给其他网页。像这样没有链接的节点我们称它为悬挂节点，显然，真实环境中这样的网页还很多。要解决这个问题，我们可以转换一种思维方式来思考PageRank，或者说用另外一种视角。

设想我们随机的上网冲浪，我们会随机地从一个页面跳转到另外一个页面。设我们浏览的页面为Pj，它拥有j个链接，其中一个将我们链接到Pi这个页面，那么我们最终浏览Pi页面的概率为1/lj。因为是随机冲浪的，所以我们可以用时间来类比，我们是将在Pj上面浏览的一个时间碎片交给了Pi，也就是Tj/lj。如此叠加，我们可以确定Pi的时间为：

![](http://www.ams.org/featurecolumn/images/december2006/index_10.gif)

也就是说![](http://www.ams.org/featurecolumn/images/december2006/index_11.gif)。

利用这种视角考虑一个没有任何链接的悬挂节点。我们不可能在这个页面上终止我们的网上冲浪，我们会随机的浏览另外一个网页，可能是通过浏览器的地址栏输入或以其他方式跳转，那么我们可以得到我们跳转向某个页面的概率为1/n，n为总的页面数。下面我们重新定义下上一个例子：

![](http://www.ams.org/featurecolumn/images/december2006/dangling.jpg)

with matrix

![](http://www.ams.org/featurecolumn/images/december2006/matrix.4.gif)

and eigenvector

![](http://www.ams.org/featurecolumn/images/december2006/eigenvector.4.gif)

通常说来，*power
method*是用来寻找矩阵特征向量对应的最大特征值的。在我们上面的例子中使用了特征值为1，实际上我们可以用比1小的特征值。
假设S的特征值为![](http://www.ams.org/featurecolumn/images/december2006/index_14.gif)。有

![](http://www.ams.org/featurecolumn/images/december2006/index_15.gif)

则有：

![](http://www.ams.org/featurecolumn/images/december2006/index_17.gif)

![](http://www.ams.org/featurecolumn/images/december2006/index_18.gif)

Since the eigenvalues ![](http://www.ams.org/featurecolumn/images/december2006/index_19.gif) with ![](http://www.ams.org/featurecolumn/images/december2006/index_20.gif) have
magnitude smaller than one, it follows that ![](http://www.ams.org/featurecolumn/images/december2006/index_21.gif) if ![](http://www.ams.org/featurecolumn/images/december2006/index_22.gif)and
therefore ![](http://www.ams.org/featurecolumn/images/december2006/index_23.gif) ,
an eigenvector corresponding to the eigenvalue 1.

It is important to note here that the rate at which ![](http://www.ams.org/featurecolumn/images/december2006/index_24.gif) is
determined by ![](http://www.ams.org/featurecolumn/images/december2006/index_25.gif) .
When ![\$ |\\lambda\_2| \$
](http://www.ams.org/featurecolumn/images/december2006/index_26.gif) is
relatively close to 0, then ![](http://www.ams.org/featurecolumn/images/december2006/index_27.gif) relatively
quickly.

以上的讨论中，我们假设矩阵S的 ![](http://www.ams.org/featurecolumn/images/december2006/index_34.gif) 并且![](http://www.ams.org/featurecolumn/images/december2006/index_35.gif) ，但实际上不常是这样的。

下面的例子:

![](http://www.ams.org/featurecolumn/images/december2006/cyclic.jpg)![](http://www.ams.org/featurecolumn/images/december2006/matrix.1.gif)

那么有

 
 <p>                                                 <center>   &lt;table border=1 cellpadding=5&gt;   <tr>   &lt;td bgcolor=#ffffcc&gt; <em>I <sup>0</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>1</sup></em>     &lt;td bgcolor=#ffffcc&gt; <em>I <sup>2</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>3</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>4</sup></em>    &lt;td bgcolor=#ffffcc&gt; <em>I <sup>5</sup></em>    </tr>   <tr>   <td> 1 </td>   <td> 0 </td>   <td> 0 </td>   <td> 0 </td>   <td> 0 </td>    <td> 1 </td>   </tr>   <tr>   <td> 0 </td>   <td> 1 </td>   <td> 0 </td>   <td> 0 </td>    <td> 0 </td>   <td> 0 </td>   </tr>   <tr>   <td> 0 </td>   <td> 0 </td>   <td> 1 </td>    <td> 0 </td>   <td> 0 </td>   <td> 0 </td>   </tr>   <tr>   <td> 0 </td>   <td> 0 </td>    <td> 0 </td>   <td> 1 </td>   <td> 0 </td>   <td> 0 </td>   </tr>   <tr>   <td> 0 </td>    <td> 0 </td>   <td> 0 </td>   <td> 0 </td>   <td> 1 </td>   <td> 0 </td>   </tr>                            </center>                        </p>

the sequence of vectors <em>I <sup>k</sup></em> fails to converge。这是因为![](http://www.ams.org/featurecolumn/images/december2006/index_36.gif)，所以power
method就失效了。

为了保证![](http://www.ams.org/featurecolumn/images/december2006/index_37.gif) ,
矩阵**S** 必须 *primitive。*这意味着对于某个自然数*m*, <em>S <sup>m</sup></em>中的数值全为正。也就是说，对于两个页面，最多经过m个链接，可以从第一个页面跳转到第二个页面。显然，上个例子并不满足。

下面是另外一个例子：

![](http://www.ams.org/featurecolumn/images/december2006/reducible.jpg)

![](http://www.ams.org/featurecolumn/images/december2006/matrix.2.gif)

with stationary vector

![](http://www.ams.org/featurecolumn/images/december2006/eigenvector.2.gif)

有4个网页的PageRank为0，这显然不对，原因是上图中内涵一个更小的网络。

![](http://www.ams.org/featurecolumn/images/december2006/reduciblewithbox.2.jpg)

就像上面所说的悬挂节点一样，前4个页面的权值进入蓝色的区域后，就在内部消化而不返回出来，其余4个页面获得了前4个页面所有的权值。这是因为矩阵S是可约的，也就是如下形式：

![](http://www.ams.org/featurecolumn/images/december2006/index_39.gif)

要达到不可约，则网络图必须是强连通的，只有强连通图，才能保证有不可约的矩阵。

最终修改：

我们需要重新构造我们的上网行为：我们在浏览有链接的网站时，仍然有一定的几率不遵守这个网站上面的链接，而直接在地址栏上面输入我们想要去的网站，假设这个概率为![](http://www.ams.org/featurecolumn/images/december2006/index_42.gif)。

最终的公式为：![](http://www.ams.org/featurecolumn/images/december2006/index_44.gif)

显然![](http://www.ams.org/featurecolumn/images/december2006/xx.gif)值应该要非常接近1，根据大量的实验结果，Serbey
Brin和Larry Page选择了0.85。

使用*power method*则公式为：

 

![](http://www.ams.org/featurecolumn/images/december2006/index_52.gif)

 

![](http://www.ams.org/featurecolumn/images/december2006/index_53.gif)

 

![](http://www.ams.org/featurecolumn/images/december2006/index_54.gif)
</p></p></p></p>
]]></content>
  </entry>
  
</feed>
