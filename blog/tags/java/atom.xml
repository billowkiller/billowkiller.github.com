<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tags: java | Tech Digging and Sharing]]></title>
  <link href="http://billowkiller.github.io/blog/tags/java/atom.xml" rel="self"/>
  <link href="http://billowkiller.github.io/"/>
  <updated>2016-07-05T12:13:33+08:00</updated>
  <id>http://billowkiller.github.io/</id>
  <author>
    <name><![CDATA[wutao]]></name>
    <email><![CDATA[billowkiller@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Log4j]]></title>
    <link href="http://billowkiller.github.io/blog/2015/07/26/java-log4j/"/>
    <updated>2015-07-26T15:28:00+08:00</updated>
    <id>http://billowkiller.github.io/blog/2015/07/26/java-log4j</id>
    <content type="html"><![CDATA[<h2 id="java-log4j-">Java Log4j 使用记录</h2>

<p>Log4j即为Java的日志记录框架，除了Java语言外，它还支持其他的语言接口：C、C++、.Net和PL/SQL。说道日志框架，其他使用较多的日志框架还包括Logback、SLF4J Simple Logging、Java Util Logging，这些日志框架都是大同小异，目的都是用来记录程序运行的状态。它们的区别主要是在用法和性能上，由于日志通常涉及到IO读写磁盘（或者是阻塞或者是异步），这需要耗费时间，假设应用系统的日志比较庞大，对性能要求比较高，那么就需要好好斟酌下使用的框架。这里有个图可以直观感受下几个框架的区别：</p>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/log%20comparision_zpstrg3kc1m.png" alt="image" /></p>

<p>上图中的数字是每秒的日志写入行数，<a href="https://docs.google.com/spreadsheet/ccc?key=0Alceaf46X4GPdHBoLTdYQ29nRDh6V1dRY00zT1FwWWc&amp;usp=sharing">点击更详细的信息</a>。</p>

<!--more-->

<h2 id="hello-word-example">Hello Word Example</h2>

<p>示例是使用maven来组织的。maven用的越多，就越觉得它的方便，不用关心jar包的管理，开发、测试和发布都只需要一行命令，还能还IDE完美的融合。</p>

<p><code>xml pom.xml
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;1.2.17&lt;/version&gt;
    &lt;/dependency&gt;
</code></p>

<p>创建log4j.properties文件，放在resources文件夹下，这个文件夹的路径是src/main/resources。</p>

<p>``` properties log4j.properties
# Root logger option
log4j.rootLogger=DEBUG, stdout, file</p>

<h1 id="redirect-log-messages-to-console">Redirect log messages to console</h1>
<p>log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n</p>

<h1 id="redirect-log-messages-to-a-log-file-support-file-rolling">Redirect log messages to a log file, support file rolling.</h1>
<p>log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=C:\log4j-application.log
log4j.appender.file.MaxFileSize=5MB
log4j.appender.file.MaxBackupIndex=10
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
```</p>

<p>说明下ConversionPattern中的符号和参数：</p>

<ol>
  <li><code>%d{yyyy-MM-dd HH:mm:ss}</code> 日期和时间</li>
  <li><code>%-5p</code> 日志优先级, 输出DEBUG、ERROR等. <code>-5</code>是可选的, 格式化输出宽度，为了更好的输出效果.</li>
  <li><code>%c{1}</code> 是日志名称，通过getLogger()设置, 可以参考<a href="http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html">log4j PatternLayout guide</a>.</li>
  <li><code>%L</code> 打印日志的句子在源文件中的行数.</li>
  <li><code>%m%n</code> 打印的日志信息和换行符.</li>
</ol>

<p>上述设置的输出效果是：</p>

<pre><code>2014-07-02 20:52:39 DEBUG className:200 - This is debug message
2014-07-02 20:52:39 DEBUG className:201 - This is debug message2
</code></pre>

<p>``` java HelloExample.java</p>

<p>import org.apache.log4j.Logger;</p>

<p>public class HelloExample{</p>

<pre><code>final static Logger logger = Logger.getLogger(HelloExample.class);
 
public static void main(String[] args) {
 
    HelloExample obj = new HelloExample();
    obj.runMe("billowkiller");
}
 
private void runMe(String parameter){
 
    if(logger.isDebugEnabled()) {
        logger.debug("This is debug : " + parameter);
    }
    if(logger.isInfoEnabled()) {
        logger.info("This is info : " + parameter);
    }
    logger.warn("This is warn : " + parameter);
    logger.error("This is error : " + parameter);
    logger.fatal("This is fatal : " + parameter);
    
    try{
        1/0;
    }catch(ArithmeticException ex){
        logger.error("Sorry, something wrong!", ex);
    }
} } ```
</code></pre>

<p>可以调整配置文件中的<code>log4j.rootLogger</code>设置日志输出的级别和<code>appender</code>，级别从低到高有DEBUG、INFO、WARN、ERROR、FATAL，一般使用INFO和ERROR。</p>

<p>顺便说一句，类似<code>logger.isDebugEnabled()</code>这种句子在源码中实在是不太美观。如果debug中间的信息不影响程序的性能还是不要使用这种句子，因为log4j自己会检查需不需要输出debug信息。</p>

<h3 id="tips">Tips</h3>

<ul>
  <li>java -calsspath *.jar 加载多个jar包，而多个jar包中可能包含多个log4j.properties的时候，系统自动加载第一个，忽略后面的。也就是说将你想要使用的log4j.properties所包含的jar文件放在classpath的第一个。</li>
  <li>mvn的package和test可以分别对应两个不同的log4j.properties中，如下：src/main/resources/log4j.properties, src/test/resources/log4j.properties。</li>
  <li><strong>需要注意程序的输出级别，用户可以定义不同的配置文件来输出不同级别的信息</strong>。这一点尤其重要：
    <ul>
      <li>工具是为程序提供服务的，在开发和调试阶段，日志可以帮助我们更好更快地定位bug；在运行维护阶段，日志系统又可以帮我们记录大部分的异常信息，从而帮助我们更好的完善系统。</li>
      <li>定义好级别和输出的日志信息，配合使用<code>grep</code>等命令行工具，可以更好的帮助我们定位错误。</li>
      <li>在设计系统之前需要先确定好日志子系统，在什么情况下程序会发生错误，输出什么样的错误信息，在debug和正常运行的时候日志如何调整，error信息是否需要另外打印。</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Virtual Machine]]></title>
    <link href="http://billowkiller.github.io/blog/2015/06/30/jvm/"/>
    <updated>2015-06-30T17:23:00+08:00</updated>
    <id>http://billowkiller.github.io/blog/2015/06/30/jvm</id>
    <content type="html"><![CDATA[<p>最近在做hadoop和spark的诊断调优工具，用的是java。有段时间没有用了，所以这里记录下JVM相关的知识。</p>

<p>James Gosling曾说过”大部分人大谈特谈JAVA语言，这对于我来说也许听起来很奇怪，但是我无法不去在意。JVM才是Java生态系统的核心“。最近比较流行Spark使用的Scala，Storm使用的Clojure，还有像Groovy，JPython等都是基于JVM的语言。摘自<a href="https://www.zhihu.com/question/20003582/answer/13649045">知乎上的一段话</a>，说明JVM特点：</p>

<ul>
  <li>非常经济地实现跨平台。你的语言编译器后端只需要输出 JVM 字节码就可以。跨平台需要极大的工作量，举个例子，只是独立开发生成本地代码，就需要花费大量精力去针对不同平台和处理器进行优化（比如 Firefox 就会考虑重用 WebKit 的这部分后端）。 </li>
  <li>JVM 卓越的 JIT （Just-In-Time 即时编译）性能。 JIT 可以在运行中记录程序运行的特征，并在其基础上做大量的优化（Java 企业级应用的优秀性能很大程度上是由此而来）。 JIT 自从 HotSpot JVM 随 Java 1.2 发布以来，JVM JIT 的性能不断提高，是无可争议的成功产品。把 JVM 作为目标平台意味着大量的性能优化工作可以「外包」给 JVM 来做，大大缩减了 Guest 语言的开发预算。</li>
  <li>已经有多个成熟的实例，有大量的经验可以借鉴</li>
  <li>JVM 作为一个成熟的高层运行环境，为 Guest 语言提供了很多运行时所需要的服务，比如内存管理（有业界领先的垃圾回收等），很大程度上避免了额外的独立开发。</li>
  <li>JVM 有多个独立实现，也有若干厂商会持续推进，资料完备，社区巨大。</li>
  <li>Java 社区有大量成熟的库，一般来说，运行在 JVM 上的其它语言都会设计一个专用的「桥」来帮助直接使用 Java 的库，对潜在客户来说是个很好的卖点。</li>
  <li>Java 有还算不错的开发工具和环境。目标为 JVM 的很多语言会考虑用 Java 语言实现（至少在 bootstrap 阶段）。</li>
</ul>

<p>C++与JAVA运行时的区别可以参考下图：</p>

<p><img src="http://img2.ph.126.net/V9_jvXWPddh6LVsL1E9b3g==/1276489019400160092.jpg" width="500px" /></p>

<p>那么接下来就谈谈JVM。</p>

<h2 id="memory-model">Memory Model</h2>

<p>首先是看看JVM内存模型，分哪几个区，每个区的作用是什么？</p>

<p><img src="http://7xqfqs.com1.z0.glb.clouddn.com/16-6-30/37908210.jpg" width="600px" /></p>

<p>上图是JVM的内存模型：</p>

<ul>
  <li>
    <p>方法区：</p>

    <ul>
      <li>有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载</li>
      <li>方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。</li>
      <li>该区域是被线程共享的。</li>
      <li>方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。</li>
    </ul>
  </li>
  <li>
    <p>虚拟机栈:</p>

    <ul>
      <li>虚拟机栈也就是我们平常所称的栈内存,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。</li>
      <li>虚拟机栈是线程私有的，它的生命周期与线程相同。</li>
      <li>局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定</li>
      <li>操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式</li>
      <li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。</li>
    </ul>
  </li>
  <li>
    <p>本地方法栈</p>

    <ul>
      <li>本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。</li>
    </ul>
  </li>
  <li>
    <p>堆</p>

    <ul>
      <li>java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。</li>
    </ul>
  </li>
  <li>
    <p>程序计数器</p>

    <ul>
      <li>内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。</li>
    </ul>
  </li>
</ul>

<h2 id="gabage-collection">Gabage Collection</h2>

<p>Java是由虚拟机自动释放内存的。在JVM中，有一个垃圾回收线程Finalize，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。</p>

<p><strong>GC对象的判定方法主要有两种:</strong></p>

<ol>
  <li>引用计数法: 无法解决循环引用问题。</li>
  <li>可达性算法(引用链法): 从一个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。</li>
</ol>

<p>当一个对象不可达GC Root时，这个对象并不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记。</p>

<p>如果对象在可达性分析中没有与GC Root的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行<code>finalize()</code>方法。当对象没有覆盖<code>finalize()</code>方法或者已被虚拟机调用过，那么就认为是没必要的。</p>

<p><strong>java中垃圾收集的方法有一下几种：</strong></p>

<ol>
  <li>标记-清除</li>
  <li>复制算法： 内存划分为8:1:1三部分，较大那份内存交Eden区，其余是两块较小的内存区叫Survior区。每次都会优先使用Eden区，若Eden区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于Survivor不够时，会将这些对象通过分配担保机制复制到老年代中。</li>
  <li>标记-整理：该算法主要是为了解决标记-清除产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。</li>
</ol>

<p>现在的虚拟机垃圾收集大多采用分代回收，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用标记-整理 或者 标记-清除。</p>

<p><img src="http://7xqfqs.com1.z0.glb.clouddn.com/16-6-30/61991650.jpg" width="600px" /></p>

<p><strong>分配策略和GC过程如下：</strong></p>

<ul>
  <li>对象优先在堆的Eden区分配。</li>
  <li>大对象直接进入老年代.</li>
  <li>长期存活的对象将直接进入老年代.</li>
</ul>

<p>当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC。Minor Gc通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生GC的频率较高，回收速度比较快；Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC，但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。</p>

<p>几种垃圾收集器可以参考<a href="http://www.zicheng.net/article/55.htm">http://www.zicheng.net/article/55.htm</a></p>

<h2 id="section">类加载过程</h2>

<p>类加载是虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p>

<p>类加载有个<strong>双亲委派模型机制</strong>，是指当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。</p>

<p>主要有一下四种类加载器:</p>

<ol>
  <li>启动类加载器(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。</li>
  <li>扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li>
  <li>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过<code>ClassLoader.getSystemClassLoader()</code>来获取它。</li>
  <li>用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。类似一些静态类UT类就是采用这种方式。</li>
</ol>

<h2 id="section-1">内存分析命令</h2>

<ol>
  <li>
    <p>jps: 查看所有的jvm进程，包括进程ID，进程启动的路径等等。</p>
  </li>
  <li>
    <p>jinfo: 观察进程运行环境参数，包括Java System属性和JVM命令行参数</p>

    <ul>
      <li>查看Java进程的栈空间大小:sudo -u tomcat /home/java/default/bin/jinfo - ThreadStackSize 14750</li>
      <li>查看是否使用了压缩指针:sudo -u tomcat /home/java/default/bin/jinfo -flag UseCompressedOops 14750</li>
      <li>查看系统属性:sudo -u tomcat /home/java/default/bin/jinfo -sysprops 14750</li>
    </ul>
  </li>
  <li>
    <p>jstack: 观察jvm中当前所有线程的运行情况和线程当前状态。</p>

    <ul>
      <li>查看一个指定的Java进程中的线程的状态:sudo -u tomcat /home/java/default/bin/jstack 14750</li>
    </ul>
  </li>
  <li>
    <p>jmap: 监视进程运行中的jvm物理内存的占用情况，该进程内存内，所有对象的情况，例如产生了哪些对象，对象数量</p>

    <ul>
      <li>空间中各个年龄段的空间的使用情况:sudo -u tomcat /home/java/default/bin/jmap -heap 14750</li>
    </ul>
  </li>
  <li>
    <p>jstat: Java应用程序的资源和性能进行实时的命令行的监控</p>
  </li>
</ol>

]]></content>
  </entry>
  
</feed>
