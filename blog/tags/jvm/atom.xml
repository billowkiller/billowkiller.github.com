<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tags: jvm | Tech Digging and Sharing]]></title>
  <link href="http://billowkiller.github.io/blog/tags/jvm/atom.xml" rel="self"/>
  <link href="http://billowkiller.github.io/"/>
  <updated>2016-12-07T17:14:38+08:00</updated>
  <id>http://billowkiller.github.io/</id>
  <author>
    <name><![CDATA[wutao]]></name>
    <email><![CDATA[billowkiller@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Virtual Machine]]></title>
    <link href="http://billowkiller.github.io/blog/2015/06/30/jvm/"/>
    <updated>2015-06-30T17:23:00+08:00</updated>
    <id>http://billowkiller.github.io/blog/2015/06/30/jvm</id>
    <content type="html"><![CDATA[<p>最近在做hadoop和spark的诊断调优工具，用的是java。有段时间没有用了，所以这里记录下JVM相关的知识。</p>

<p>James Gosling曾说过”大部分人大谈特谈JAVA语言，这对于我来说也许听起来很奇怪，但是我无法不去在意。JVM才是Java生态系统的核心“。最近比较流行Spark使用的Scala，Storm使用的Clojure，还有像Groovy，JPython等都是基于JVM的语言。摘自<a href="https://www.zhihu.com/question/20003582/answer/13649045">知乎上的一段话</a>，说明JVM特点：</p>

<ul>
  <li>非常经济地实现跨平台。你的语言编译器后端只需要输出 JVM 字节码就可以。跨平台需要极大的工作量，举个例子，只是独立开发生成本地代码，就需要花费大量精力去针对不同平台和处理器进行优化（比如 Firefox 就会考虑重用 WebKit 的这部分后端）。 </li>
  <li>JVM 卓越的 JIT （Just-In-Time 即时编译）性能。 JIT 可以在运行中记录程序运行的特征，并在其基础上做大量的优化（Java 企业级应用的优秀性能很大程度上是由此而来）。 JIT 自从 HotSpot JVM 随 Java 1.2 发布以来，JVM JIT 的性能不断提高，是无可争议的成功产品。把 JVM 作为目标平台意味着大量的性能优化工作可以「外包」给 JVM 来做，大大缩减了 Guest 语言的开发预算。</li>
  <li>已经有多个成熟的实例，有大量的经验可以借鉴</li>
  <li>JVM 作为一个成熟的高层运行环境，为 Guest 语言提供了很多运行时所需要的服务，比如内存管理（有业界领先的垃圾回收等），很大程度上避免了额外的独立开发。</li>
  <li>JVM 有多个独立实现，也有若干厂商会持续推进，资料完备，社区巨大。</li>
  <li>Java 社区有大量成熟的库，一般来说，运行在 JVM 上的其它语言都会设计一个专用的「桥」来帮助直接使用 Java 的库，对潜在客户来说是个很好的卖点。</li>
  <li>Java 有还算不错的开发工具和环境。目标为 JVM 的很多语言会考虑用 Java 语言实现（至少在 bootstrap 阶段）。</li>
</ul>

<p>C++与JAVA运行时的区别可以参考下图：</p>

<p><img src="http://7xqfqs.com1.z0.glb.clouddn.com/public/16-11-27/81591600.jpg" width="500px" /></p>

<p>那么接下来就谈谈JVM。</p>

<h2 id="memory-model">Memory Model</h2>

<p>首先是看看JVM内存模型，分哪几个区，每个区的作用是什么？</p>

<p><img src="http://7xqfqs.com1.z0.glb.clouddn.com/16-6-30/37908210.jpg" width="600px" /></p>

<p>上图是JVM的内存模型：</p>

<ul>
  <li>
    <p>方法区：</p>

    <ul>
      <li>有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载</li>
      <li>方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。</li>
      <li>该区域是被线程共享的。</li>
      <li>方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。</li>
    </ul>
  </li>
  <li>
    <p>虚拟机栈:</p>

    <ul>
      <li>虚拟机栈也就是我们平常所称的栈内存,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。</li>
      <li>虚拟机栈是线程私有的，它的生命周期与线程相同。</li>
      <li>局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定</li>
      <li>操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式</li>
      <li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。</li>
    </ul>
  </li>
  <li>
    <p>本地方法栈</p>

    <ul>
      <li>本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。</li>
    </ul>
  </li>
  <li>
    <p>堆</p>

    <ul>
      <li>java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。</li>
    </ul>
  </li>
  <li>
    <p>程序计数器</p>

    <ul>
      <li>内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。</li>
    </ul>
  </li>
</ul>

<h2 id="gabage-collection">Gabage Collection</h2>

<p>Java是由虚拟机自动释放内存的。在JVM中，有一个垃圾回收线程Finalize，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。</p>

<p><strong>GC对象的判定方法主要有两种:</strong></p>

<ol>
  <li>引用计数法: 无法解决循环引用问题。</li>
  <li>可达性算法(引用链法): 从一个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。</li>
</ol>

<p>当一个对象不可达GC Root时，这个对象并不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记。</p>

<p>如果对象在可达性分析中没有与GC Root的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行<code>finalize()</code>方法。当对象没有覆盖<code>finalize()</code>方法或者已被虚拟机调用过，那么就认为是没必要的。</p>

<p><strong>java中垃圾收集的方法有一下几种：</strong></p>

<ol>
  <li>标记-清除</li>
  <li>复制算法： 内存划分为8:1:1三部分，较大那份内存交Eden区，其余是两块较小的内存区叫Survior区。每次都会优先使用Eden区，若Eden区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于Survivor不够时，会将这些对象通过分配担保机制复制到老年代中。</li>
  <li>标记-整理：该算法主要是为了解决标记-清除产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。</li>
</ol>

<p>现在的虚拟机垃圾收集大多采用分代回收，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用标记-整理 或者 标记-清除。</p>

<p><img src="http://7xqfqs.com1.z0.glb.clouddn.com/16-6-30/61991650.jpg" width="600px" /></p>

<p><strong>分配策略和GC过程如下：</strong></p>

<ul>
  <li>对象优先在堆的Eden区分配。</li>
  <li>大对象直接进入老年代.</li>
  <li>长期存活的对象将直接进入老年代.</li>
</ul>

<p>当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC。Minor Gc通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生GC的频率较高，回收速度比较快；Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC，但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。</p>

<p>几种垃圾收集器可以参考<a href="http://www.zicheng.net/article/55.htm">http://www.zicheng.net/article/55.htm</a></p>

<h2 id="section">类加载过程</h2>

<p>类加载是虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p>

<p>类加载有个<strong>双亲委派模型机制</strong>，是指当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。</p>

<p>主要有一下四种类加载器:</p>

<ol>
  <li>启动类加载器(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。</li>
  <li>扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li>
  <li>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过<code>ClassLoader.getSystemClassLoader()</code>来获取它。</li>
  <li>用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。类似一些静态类UT类就是采用这种方式。</li>
</ol>

<h2 id="section-1">内存分析命令</h2>

<ol>
  <li>
    <p>jps: 查看所有的jvm进程，包括进程ID，进程启动的路径等等。</p>
  </li>
  <li>
    <p>jinfo: 观察进程运行环境参数，包括Java System属性和JVM命令行参数</p>

    <ul>
      <li>查看Java进程的栈空间大小:sudo -u tomcat /home/java/default/bin/jinfo - ThreadStackSize 14750</li>
      <li>查看是否使用了压缩指针:sudo -u tomcat /home/java/default/bin/jinfo -flag UseCompressedOops 14750</li>
      <li>查看系统属性:sudo -u tomcat /home/java/default/bin/jinfo -sysprops 14750</li>
    </ul>
  </li>
  <li>
    <p>jstack: 观察jvm中当前所有线程的运行情况和线程当前状态。</p>

    <ul>
      <li>查看一个指定的Java进程中的线程的状态:sudo -u tomcat /home/java/default/bin/jstack 14750</li>
    </ul>
  </li>
  <li>
    <p>jmap: 监视进程运行中的jvm物理内存的占用情况，该进程内存内，所有对象的情况，例如产生了哪些对象，对象数量</p>

    <ul>
      <li>空间中各个年龄段的空间的使用情况:sudo -u tomcat /home/java/default/bin/jmap -heap 14750</li>
    </ul>
  </li>
  <li>
    <p>jstat: Java应用程序的资源和性能进行实时的命令行的监控</p>
  </li>
</ol>

]]></content>
  </entry>
  
</feed>
