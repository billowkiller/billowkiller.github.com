<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rework | Billowkiller's Blog]]></title>
  <link href="http://billowkiller.github.io/blog/categories/rework/atom.xml" rel="self"/>
  <link href="http://billowkiller.github.io/"/>
  <updated>2013-05-15T01:58:44-04:00</updated>
  <id>http://billowkiller.github.io/</id>
  <author>
    <name><![CDATA[Wutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[硝烟中的Scrum和XP]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/xiao-yan-zhong-de-scrumhe-xp/"/>
    <updated>2013-05-14T01:09:00-04:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/xiao-yan-zhong-de-scrumhe-xp</id>
    <content type="html"><![CDATA[<p><strong>refine from</strong> <em>硝烟中的Scrum和XP&mdash;我们如何实施Scrum</em></p>

<hr />

<p>产品的backlog时Scrum的核心，也是一切的起源，从根本上说，它就是一个需求或故事特性等组成的列表，按照重要性的级别进行排序。它里面包含的是客户想要的东西，并用客户的术语加一描述。</p>

<p>backlog的另外一个名称是故事。包括以下字段：</p>

<ul>
<li>ID</li>
<li>Name：一个简短的描述</li>
<li>Importance：100以内打分，分数越高越重要</li>
<li>Initial estimate：最小单位为stroy
point，即为人天。估值无需准确，但是要保证相对的正确性。</li>
<li>How to demo：简短的测试规范，先做啥，然后做啥，最后做啥，得到什么结果。</li>
<li>Notes：相关信息，解释说明，对其他资料的引用等等，简短。</li>
</ul>


<p>额外的字段，根据需要：</p>

<ul>
<li>Track：当前故事的大致分类（后台系统，优化&hellip;）</li>
<li>Components：再多个Scrum团队协作的时候很有用，包括数据库，服务器，客户端等组件</li>
<li>Requestor：哪个客户活相关人员最先提出的需求，再后续的开发过程中向他反馈</li>
<li>Bug tracking ID</li>
</ul>


<p>产品的backlog应该停留再业务层次上，例如给Events表添加索引，潜在的目标是“提高再后台系统中搜索事件表单的相应速度”，这时需要改写，原先的目标作为一个注释存在。</p>

<!--more-->


<p>产品负责人维护backlog，理解每个故事的含义，不需要知道故事的具体实现，但是要知道为什么这个故事会在这里。其他人向负责人申请故事，负责人对它们划分先后次序。</p>

<p>sprint计划会议产生的成果：</p>

<ul>
<li>sprint目标</li>
<li>团队成员名单（以及他们的投入程度）</li>
<li>sprint backlog</li>
<li>确定好sprint演示日期</li>
<li>确定每日Scrum会议的时间和地点</li>
</ul>


<p>过程中实践TDD（测试驱动开发），包括开发和提问需求方式&hellip;</p>

<p>故事可以分成更小的故事，而小故事又可以分成任务。</p>

<p>一些重要的开发概念：</p>

<ul>
<li>结对编程</li>
<li>测试驱动开发：Juit/httpnit/JWebUnit，HSQLDB，Jetty，Cobertura，mock</li>
<li>增量设计</li>
<li>代码集体所有权</li>
<li>持续集成：Maven，QuickBuild</li>
<li>代码标准</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[P2P流媒体视频点播系统的个人技术报告]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/p2pliu-mei-ti-shi-pin-dian-bo-xi-tong-de-ge-ren-ji-zhu-bao-gao/"/>
    <updated>2013-05-14T01:09:00-04:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/p2pliu-mei-ti-shi-pin-dian-bo-xi-tong-de-ge-ren-ji-zhu-bao-gao</id>
    <content type="html"><![CDATA[<h3>项目说明</h3>

<pre><code>来源为高等计算机网络的大作业设计。我们组选择的是p2p的流媒体视频点播系统。核心内容的是chord算法。
</code></pre>

<h3>系统分析</h3>

<pre><code>局域网内的任何结点既可以发送媒体压缩信息给其他结点，也可以从其他结点接收视频信息。此外流媒体信息是在网内从多源结点获取，而非单源模式。改变传统的需要中央服务器的查询支持，虽然本系统也需要一个中央服务器进行存储数据源以及节点加入的初始化，但是一旦节点加入了p2p网络，那么中央服务器的功能便会弱化很多，客户端peer可以利用其他peer节点已有的信息进行资源查询，而不用经过中央服务器。
</code></pre>

<p>在理论上，chord是一个纯p2p算法，但是在试验中我们发现，在广域网中实现一个完全对等的p2p网络是不大现实的一件事情，因为根据chord算法，节点的加入需要知道一个已知的节点信息，而这个节点信息无法像在局域网中可以通过广播的方式进行查询，也就是说这个已知的节点就是存在的中央服务器，所有的节点加入都需要知道中央服务器在网络中的位置，通过中央服务器加入到chord网络中。而在局域网中，必存在一个初始信息源，对于一个如上所描述的系统来说，这个初始信息源可以当成一个中央服务器，当然这个中央服务器的功能也被弱化很多。</p>

<h4>项目设计与管理</h4>

<pre><code>采用JAVA语言作为实现工具，并利用其UDT传输包实现数据传输、JMF视频播放工具包和openchord开源工具包，在局域网内实现基于P2P的流媒体视频点播系统。系统设计主要涉及的工作量包括：服务器端资源管理、P2P资源查询传输机制、客户端缓冲区管理和视频播放软件。预计的工作时间为1个月，总工作量为4人月。开发采用敏捷开发模型，进行迭代式开发，开发讨论为3天一次的站立会议，有效保障小组成员的信息一致性。会议中根据迭代需求列出一周或者近期的任务，小组成员互相监督管理，提高效率。能够有效的保障在规定的时间内完成项目。
</code></pre>

<!--more-->


<h3>功能需求</h3>

<ul>
<li><p>客户端软件：运行客户端软件即获取所有频道列表信息，获取需要播放的文件信息，查询本地缓冲区，若已在本地有播放过，则直接进行本地播放；没有缓存的文件则将从可用的对等节点获取。</p></li>
<li><p>缓冲区管理：P2P资源查询和分发资源服务器管理资源，使用chord协议获取得到资源存储节点，选择资源存储节点，使用多线程调度下载，提供分片信息给客户端软件。将视频分片组成队列，记录分片大小，若总的缓冲区大于500MB则根据队列顺序删除先到的分片。
服务器端：初始化资源，构建chord网络。其他peer节点加入服务器端的chord网络。</p></li>
</ul>


<h3>实现效率</h3>

<pre><code>提高效率的方法包括：
</code></pre>

<ol>
<li>使用多线程进行下载分片资源；</li>
<li>缓冲区大小管理，避免下载重复资源；</li>
<li>使用UDT传输，加快传输效率，简化系统复杂度。</li>
<li>同一资源节点的选择算法</li>
</ol>


<p><img src="http://images.cnitblog.com/blog/434023/201301/02172642-90a8182460f045fdb3c3b44f0f9e408b.png" title="类图" alt="类图" /></p>

<h3>个人工作总结</h3>

<h4>项目管理</h4>

<pre><code>我并不是第一次在项目中担任组长，但是这次的项目开发与以往有很大的不同。
</code></pre>

<ol>
<li>组员之间互相都不熟悉，对对方了解什么技术，善于哪一个模块的开发都不了解。</li>
<li>工作时间不固定，而且特别的缺少，每个组员都有老师分配的任务和其他的课堂作业。</li>
<li>工作环境不理想，组员的实验室之间相隔较远，沟通不够方便</li>
<li>组员普遍对新技术不太了解，只是掌握基础知识，开发上存在困难。</li>
<li><p>没有明确的需求和系统边界。</p>

<p>以上种种的一切都给开发造成困难，特别是第一条。因为对大家的开发水平和偏好都不了解，所以在分配任务的时候就相当与黑盒测试一般。
无法根据已知的情况安排任务。其他方面也给相互之间的沟通制造了困难。而沟通对于团队来说，我认为是比其他方面更加重要的。</p>

<p>  争对上述几条我对项目进行如下管理：</p></li>
<li><p>项目整体上为迭代开发，采用增量模型</p></li>
<li>建立qq群及时共享消息和资源</li>
<li>每周一次的例会，后来因为项目进展缓慢，改为3天一次</li>
<li>开会的时候借鉴敏捷站立会议的要点，给出任务需求，让组员选择</li>
<li>开发采用模块化的方法，预留API接口给使用者，明确代码责任制</li>
<li><p>采用git作为版本控制，所有代码再github上托管，组员可以pull和push最新更新</p>

<p>但项目管理过程中还是有很多方面没有考虑到：</p></li>
<li><p>发现开会的时候气氛不够浓烈，组员大多数时候没有提前做一些准备，导致开会时间过长</p></li>
<li>自己的思想表达不够清楚，没有确定组员明白自己的想法</li>
<li>在做架构的时候，没有做好调研工作，所选的方法并不一定时最佳的</li>
<li>组员能力不了解的情况下，将组员能力的底线设置较高</li>
<li>重点功能和说明没有采用图片或者文件保留</li>
<li>开发过程中，没有很好的进行时间估计，导致很多应有的需求未能实现</li>
</ol>


<h4>开发总结</h4>

<pre><code>我所负责的内容是缓冲区管理和系统架构的设计。开发过程中遇到的问题如下：
</code></pre>

<ol>
<li>开发过于仓促，代码比较粗糙</li>
<li>在服务器端实现多个客户端接入进行多线程udp传输文件的时候遇到困难，未能很好的实现多线程</li>
<li>在带宽检测的那一块没有实现，还是因为没有合理规划时间，导致后期工作量大。</li>
<li>开发的时候没有进行很好的时间估计</li>
</ol>


<p>收获还是有一些的：</p>

<ol>
<li>对DHT的chord lookup sevice进一步了解</li>
<li>实现p2p流媒体的功能，了解其中的机制</li>
<li>巩固和复习了Java的语法和用法，较多的使用线程，提高效率</li>
<li>总体设计和分析上有了进一步的提高</li>
</ol>


<h3>参考文献</h3>

<p>[1] P2P流媒体系统节点管理与数据分发机制. 王延伟. 山东大学硕士学位论文.
2010.\
 [2] Chord: A Scalable Peer-to-peer Lookup Service for Internet
Applications. Ion Stoica. etc. MIT Laboratory for Computer Science.
2001.\
 [3] Reducing Maintenance Overhead in Chord via Heterogeneity. Yuh-Jzer
Joung. Jiaw-Chang Wang. Taipei. 2005</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux KVM代码之美]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/linux-kvmdai-ma-zhi-mei/"/>
    <updated>2013-05-14T01:09:00-04:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/linux-kvmdai-ma-zhi-mei</id>
    <content type="html"><![CDATA[<p> <strong>edited as an essey for <em>程序语言设计原理</em> </strong></p>

<hr />

<p>在程序的编写上，我认为编程的难度，也就是可写性是一个次要的角色，而代码的可读性，可维护性一直软件生命周期中的主要部分，尤其是对于大型项目而言，软件的维护绝对是项目管理人员首先要考虑的问题，成本的控制，人月量的降低。在这一点上更为突出表现的我想应该是对于开源项目来说，人员的流动性大，项目时间的不确定性，还有对开发人员的吸引力。开源项目应该关注的不止是软件功能性的强大，思维理念的超前，更应该是代码的可读性，可维护性。毕竟没有人愿意在垃圾场上重新盖一栋漂亮的大楼。所以开源项目应该从一开始就在可读性，可维护性上下工夫，并且需要有一些自己的理念，开发标准在里面，这样可以引导后来的开发人员遵循这些原则，保证代码的可读性，可维护性，避免出现破窗效应。</p>

<p>那么如此看来，代码之美又应该包括哪些方面呢，我想应该需要有程序的可读性，可维护性，另外还需要有一些设计准则。这里就以Linux内核中的KVM代码部分为例，谈谈这些原则。</p>

<h2>一、可读性、可维护性</h2>

<p>在Github上打开Linux内核代码，涉及KVM的主要有两个目录，virt和arch/x86/kvm，我们主要研究的是arch/x86/kvm。文件夹下的Makefile和Kconfig文件可以将程序的脉络显得极为的清晰。</p>

<p>现在查看的是emulate.c文件，程序大概有4000多行，这也是C语言代码中值得诟病的地方，因为程序代码超过2页屏幕大小后，会影响人们对程序的理解，难于找到需要注意的地方，并且纠结于大量的方法和结构体之间。</p>

<p>emulate.c的文件头注释表明只是一个X86架构（32位或者64位）指令的译码器和模拟器，并且表明程序的作者，来源，程序具体涉及的方面。代码是遵循Linux编码规范的。</p>

<!--more-->


<p>包括8个字符缩进，把长的行和字符串打散，大括号和空格的放置，命名规范等。在Linux内核中Documentation/CodingStyle文件中有句话表明这些规范的用处“代码风格的意义就在于使用平常使用的工具来维持代码的可读性和可维护性”，无需特别的编辑器，只需要一个普通的文本编辑器就可以了。这些规范十分有利于读者理解和修改代码，例如不超过80列的代码长度使得函数体中的形式参数不会显得拥挤不堪，分不清个数。如图1中这样的例子在这4000行代码中俯拾皆是，极大的提高了可读性。</p>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/1.png" alt="图1"/></p>

<p>可能是得益于C语言设计的简单性和正交性，我在Linux代码中很少看到有3层以上的嵌套，代码的逻辑大多数可以在最多2层的嵌套中完成。并且程序的控制语句可以将代码的逻辑部分清晰的展现出来，无需过多的升入理解。另外，程序中的注释部分所占的比例也不会很大，不会出现注释数量比代码数量还要多的情况，并且注释部分十分的简短精细。这表明对程序片段的理解无需额外的添加注释，只是凭借代码的逻辑结构和命名就可以很好的理解代码，而且注释的语言不会显得赘述，只是简单扼要的解释片段功能或逻辑。例如图2中的情形，复杂的位操作尽管提高了效率，可是难以理解，这时就需要注释来帮助解释。</p>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/2.png" alt="图2"/></p>

<p>可读性在很多的时候是与可维护性相关联的，程序写出来很大一部分原因就是为了维护，而强可读性对于程序的理解至关重要，特别是人员流动性强的时候，而语言的特性和优秀的代码规范是可读性的保证，Linux内核代码在这两方面都做得非常好，拥有Documentation/CodingStyle这样的编程规范，还有C语言这样的高级程序设计语言。从另一方面来说，可读性强也同时意味着可写性强，因为在编写程序的过程中，编程人员需要不断地阅读已经编写的程序部分。</p>

<h2>二、设计准则</h2>

<h3>1. 频度准则</h3>

<p>越常用越简单，包括命名，和函数体。例如在模拟器的缓存表写入时有两个函数体，一个reg_write，另外一个为writeback_registers。表示的意思一个为写入，另外一个是回写，这个是对应于Cache的不同存取机制的，显然第一个较为常用，所以在命名上面会比第二个简略一些。</p>

<p>而对于更为常用的函数来说，例如一些简单的位运算，kvm将这些函数当做预编译的部分，放在函数开头。如下图3，就表示一个栈的指令移动，在代码中频繁的出现则用预编译函数来表示。并且有一些函数使用了内联的方法来提高性能，这些函数往往是另外一个复杂或者多次使用的函数的一部分，所以内联的函数函数体都比较简单，拥有一个描述性的名字，并且作用通常是作为辅助函数。</p>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/3.png" alt="图3"/></p>

<h3>2. 结构一致</h3>

<p>结构一致表示的是程序结构和计算的逻辑结构一致。Kvm代码可以体现出自顶向下、逐步求精的思想，复杂问题，往往有一个总体的引导性函数，然后会由一些子函数，辅助函数来作为过渡，逐步细化地解决问题。上文提到的一些预编译函数，内联函数就是起到这样的作用的。</p>

<p>并且在程序中使用了大量的条件语句，循环语句，返回语句，可以很容易的把握程序结构和计算的逻辑结构的一致性。另外不得不提的一点是，kvm代码中并没有摒弃goto语句的使用，一开始基于老师们和专家们的建议“不要使用goto语句”，我对这些代码有着很大的反感，但是仔细阅读后发现使用GOTO语句，会使程序流程更清楚、效率更高。</p>

<p>例如图4中，代码清晰的表示了获取操作数后处理器将要做得事情，程序的结构和计算逻辑是一致的，并不存在什么晦涩难懂的部分。</p>

<p><img src="http://i1113.photobucket.com/albums/k512/billowkiller/LinkSource/4.png" alt="图4"/></p>

<h3>3. 局部性</h3>

<p>C语言是不鼓励使用全局变量的。在emulator.c的代码中我也并未有发现全局变量的使用。代码规范里头对全局变量的描述是“只有当你真正需要它们的时候再用它”。并且对于局部变量的使用它是有标准的：“函数的另外一个衡量标准是本地变量的数量。此数量不应超过5－10个，否则你的函数就有问题了”。</p>

<p>kvm代码中函数的局部变量都很少，并且命名十分的简洁，一般为2-3个字母，是放在一块儿申明的。声明完后空一行，开始函数的逻辑部分。</p>

<h3>4. 词法内聚</h3>

<p>词法内聚是变量在使用处就近声明。这一点要看使用处的定义，因为kvm中变量的声明是放在一块的，对于函数来说，是在使用处定义。但如果把使用处定义为使用变量的具体位置，表达式或判断赋值语句，那么kvm代码中的变量声明就不是词法内聚了。</p>

<h2>三、总结</h2>

<p>总的来说Linux内核代码所带来的标准已经影响了很多从业人员，并且正在成为C语言代码的标准规范。这个规范是从Brian Kernighan和Dennis Ritchie开始的，也就是著名的经典C，并且经历了C90、C99标准，根据不同的需求在变化着，修改着。我所看到的这个CodingStyle是在两天前 Joe Perches提交的，添加了网络块的评论规范。</p>

<p>但是这些修改变化，有一个共同的目标就是使linux内核代码能够看起来更加的舒适，理解起来更容易，并最终做到可写性和维护性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网发展方向思考]]></title>
    <link href="http://billowkiller.github.io/blog/2013/05/14/hu-lian-wang-fa-zhan-fang-xiang-si-kao/"/>
    <updated>2013-05-14T01:09:00-04:00</updated>
    <id>http://billowkiller.github.io/blog/2013/05/14/hu-lian-wang-fa-zhan-fang-xiang-si-kao</id>
    <content type="html"><![CDATA[<p><em>edited from <a href="http://www.36kr.com/p/201525.html">36氪</a></em></p>

<hr />

<p><img src="http://a.36krcnd.com/photo/c9ef3536af556bb5530af32befaaeae8.png" title="T-E-C-H法则" alt="" /></p>

<p> 在互联网领域，要找到新的创新点，还是需要借鉴美国发展的模式。虽然美国与中国有着各自不同的国情，美国成功的应用在中国不一定可以找到适合它们的土壤，但是从中国几个新兴的创业巨头来看，无一不是根植与美国，由于中国的网络壁垒或者美国应用的本土化不强而创造出在中国的机会。从发展上看来，都是有先有多家startup的成立，在各自独立发展用户，或从相同的客户群中寻找潜在的用户资源，或是在不同的用户群众寻找，但是有一个共同点都是在美国成功的应用中进行借鉴。从《结网》中可以看到，对一个新兴的应用来说最为关键的不止是借鉴先有的成功的应用，还需要找到这个应用idea的起源，因为这里面包含有应用最核心的本质。在各个独立应用发展到一定阶段，圈到了一定的用户之后，关键在与培养用户的黏合度，用户是不是对这个产品有所依赖，是不是形成技术壁垒和用户壁垒即特定的用户群。在成功圈到一定用户之后，开始扩张领域，向其他同类产品拼抢用户资源，开始了互联网中最残酷的战争，这时也是公司最应该小心的时候，水桶中的任何一块木头都可能是潜在的漏洞，给对手带来机会。所以，方向的选择、良好的产品发展思路和绝对的执行力是成功的三大要素。从方向上来看我们习惯盯准美国，而美国的核心是加州，加州的辐射点是硅谷，硅谷的成功很大程度上在standford。关注standford。</p>

<!--more-->


<p><strong><em>近期的互联网方向</em></strong></p>

<p>在近期的互联网方向，有三个方向值得注意：</p>

<p>​1. 移动习惯培养</p>

<p>从最近极为成功的应用中都可以看到它们的影子，twitter，yelp，dropbox等等。但是作为存储、计算和执行终端的手机，未来将不仅仅给出信息和推荐，而是直接参与规划和执行。所谓的习惯培养，应该一脉相承的应用整合平台。只是如今市场浑水一汪，想要出类拔萃实在不易。</p>

<p>​2. 企业级应用</p>

<p>企业应用（X to
C）的行业准入壁垒高，往往在研发、投市、特别是赢得企业最终订单上的投入，并非一般
start-up
能企及。在美国前景看佳，完全由于美国大公司从来没有“节源”的概念——花的多？那我们挣得更多就是了。</p>

<p>在中国大多数都被国有企业给垄断，所以不是很被看好。</p>

<p>​3. 软硬件结合的小玩具</p>

<p>主要指 API-able
的硬件（模件）搭载简易运算软件的生活用品，很多用品都是一飞冲天，在VC上看来，这类产品是有极高的投资价值的。</p>

<p><strong><em>初创精神的DNA</em></strong></p>

<p>校园最深重又新鲜的记忆来源于是小团体，死党，外加食堂。初创团队也应当打成一片，鱼雷都炸不开，而每个人又因性格、功能的不同，各自作为一个节点向外缘延伸出触角，感知社会和用户的反馈。Felisa
总结出初创团队最常见的三种交际方式：</p>

<p>• 以“盈利”为驱动的纵向交际\
• 以“功能”为纽带的横向交际\
• 以“吃吃喝喝”为纽带的点面交际</p>

<p>国内高压竞争让前两者过分被强调，其实许多成功的合作往往来自于第三项——甚至有时候你们并没有直接的合作或是竞争关系，只是偶然对同一项热点事物感到好奇，饭桌茶几上两三人随口抛出的一组辩证说不定成为日后指导企业发展的要旨。</p>

<p><strong><em>地域分化的疼痛不是交通，是沟通</em></strong></p>

<p>初创生态圈是中心化还是去中心化？这是一个问题。创新工场给出的答案在 Felisa
听来太简单了，面对面比排排坐好，同层办公比上下楼好，
中关村“一锅杂烩”比江浙沪“遍地开花”好，世界是平的比有屋脊和海沟好……问题是，在及时讯息领域如此发达的今天，可以思考为什么沟通障碍的疼痛仍然大于其他所有原因可能带来的高损耗？移动办公还差了些什么？</p>
]]></content>
  </entry>
  
</feed>
